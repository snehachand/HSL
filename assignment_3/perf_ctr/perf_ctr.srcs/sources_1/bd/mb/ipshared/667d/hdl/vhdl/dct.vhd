-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 10;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of dct is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dct,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35tcpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.608000,HLS_SYN_LAT=59857,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=16,HLS_SYN_FF=1494,HLS_SYN_LUT=1462,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (31 downto 0) := "00000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (31 downto 0) := "00000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (31 downto 0) := "00010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (31 downto 0) := "00100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_3FC6A09E60000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111000110101000001001111001100000000000000000000000000000";
    constant ap_const_lv64_3FD0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111010000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FE6A09E60000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100110101000001001111001100000000000000000000000000000";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal dataIn_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dataIn_ce0 : STD_LOGIC;
    signal dataIn_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataOut_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dataOut_ce0 : STD_LOGIC;
    signal dataOut_we0 : STD_LOGIC;
    signal constant_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal constant_r_ce0 : STD_LOGIC;
    signal constant_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_178_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_191_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_201 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal i_1_fu_213_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_369 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_fu_229_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_reg_374 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond3_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_237_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_380 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast3_fu_245_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_cast3_reg_385 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_1_fu_255_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_393 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_398 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_271_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_reg_403 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_1_fu_289_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_1_reg_411 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_22_fu_295_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_22_reg_416 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond1_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_309_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_reg_426 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_316_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_reg_431 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_fu_320_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_reg_436 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal constant_load_reg_441 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_1_fu_337_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_1_reg_449 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_353_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_17_reg_459 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal constant_load_1_reg_474 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_173_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_4_fu_187_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_484 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_105 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_116 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ds_reg_127 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_139 : STD_LOGIC_VECTOR (3 downto 0);
    signal ds_1_reg_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_reg_162 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_fu_304_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_183_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_178_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_178_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_191_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_20_fu_225_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_267_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_cast2_fu_279_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_12_fu_299_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_cast1_fu_327_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_fu_343_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (31 downto 0);

    component dct_fadd_32ns_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dct_fmul_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dct_fptrunc_64ns_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dct_fpext_32ns_64eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dct_dmul_64ns_64nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dct_constant_r IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dct_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        dataIn_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        dataIn_ce0 : IN STD_LOGIC;
        dataIn_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dataOut_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        dataOut_ce0 : IN STD_LOGIC;
        dataOut_we0 : IN STD_LOGIC;
        dataOut_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    constant_r_U : component dct_constant_r
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => constant_r_address0,
        ce0 => constant_r_ce0,
        q0 => constant_r_q0);

    dct_AXILiteS_s_axi_U : component dct_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        dataIn_address0 => dataIn_address0,
        dataIn_ce0 => dataIn_ce0,
        dataIn_q0 => dataIn_q0,
        dataOut_address0 => dataOut_address0,
        dataOut_ce0 => dataOut_ce0,
        dataOut_we0 => dataOut_we0,
        dataOut_d0 => tmp_8_fu_183_p1);

    dct_fadd_32ns_32nbkb_U1 : component dct_fadd_32ns_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ds_1_reg_150,
        din1 => reg_195,
        ce => ap_const_logic_1,
        dout => grp_fu_173_p2);

    dct_fmul_32ns_32ncud_U2 : component dct_fmul_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_178_p0,
        din1 => grp_fu_178_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_178_p2);

    dct_fptrunc_64ns_dEe_U3 : component dct_fptrunc_64ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => reg_201,
        dout => tmp_8_fu_183_p1);

    dct_fpext_32ns_64eOg_U4 : component dct_fpext_32ns_64eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => ds_reg_127,
        dout => tmp_4_fu_187_p1);

    dct_dmul_64ns_64nfYi_U5 : component dct_dmul_64ns_64nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_191_p0,
        din1 => grp_fu_191_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_191_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ds_1_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                ds_1_reg_150 <= ds_reg_127;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                ds_1_reg_150 <= grp_fu_173_p2;
            end if; 
        end if;
    end process;

    ds_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_331_p2 = ap_const_lv1_1))) then 
                ds_reg_127 <= ds_1_reg_150;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_249_p2 = ap_const_lv1_0))) then 
                ds_reg_127 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_249_p2 = ap_const_lv1_1))) then 
                i_reg_105 <= i_1_reg_369;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_105 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_207_p2 = ap_const_lv1_0))) then 
                j_reg_116 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                j_reg_116 <= j_1_reg_393;
            end if; 
        end if;
    end process;

    x_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_331_p2 = ap_const_lv1_1))) then 
                x_reg_139 <= x_1_reg_411;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_249_p2 = ap_const_lv1_0))) then 
                x_reg_139 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    y_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                y_reg_162 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                y_reg_162 <= y_1_reg_449;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                constant_load_1_reg_474 <= constant_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                constant_load_reg_441 <= constant_r_q0;
                    tmp_11_reg_436(5 downto 3) <= tmp_11_fu_320_p3(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_369 <= i_1_fu_213_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_393 <= j_1_fu_255_p2;
                    j_cast3_reg_385(3 downto 0) <= j_cast3_fu_245_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_195 <= grp_fu_178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state25))) then
                reg_201 <= grp_fu_191_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_331_p2 = ap_const_lv1_0))) then
                tmp_17_reg_459 <= tmp_17_fu_353_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_207_p2 = ap_const_lv1_0))) then
                    tmp_1_reg_374(5 downto 3) <= tmp_1_fu_229_p3(5 downto 3);
                    tmp_5_reg_380(30 downto 29) <= tmp_5_fu_237_p3(30 downto 29);    tmp_5_reg_380(36 downto 33) <= tmp_5_fu_237_p3(36 downto 33);    tmp_5_reg_380(39) <= tmp_5_fu_237_p3(39);    tmp_5_reg_380(45) <= tmp_5_fu_237_p3(45);    tmp_5_reg_380(47) <= tmp_5_fu_237_p3(47);    tmp_5_reg_380(50 downto 49) <= tmp_5_fu_237_p3(50 downto 49);    tmp_5_reg_380(52) <= tmp_5_fu_237_p3(52);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_283_p2 = ap_const_lv1_0))) then
                tmp_22_reg_416 <= tmp_22_fu_295_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_283_p2 = ap_const_lv1_1))) then
                tmp_2_reg_431 <= tmp_2_fu_316_p2;
                    tmp_9_reg_426(30 downto 29) <= tmp_9_fu_309_p3(30 downto 29);    tmp_9_reg_426(36 downto 33) <= tmp_9_fu_309_p3(36 downto 33);    tmp_9_reg_426(39) <= tmp_9_fu_309_p3(39);    tmp_9_reg_426(45) <= tmp_9_fu_309_p3(45);    tmp_9_reg_426(47) <= tmp_9_fu_309_p3(47);    tmp_9_reg_426(50 downto 49) <= tmp_9_fu_309_p3(50 downto 49);    tmp_9_reg_426(52) <= tmp_9_fu_309_p3(52);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                tmp_4_reg_484 <= tmp_4_fu_187_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_249_p2 = ap_const_lv1_0))) then
                tmp_6_reg_398 <= tmp_6_fu_261_p2;
                    tmp_s_reg_403(5 downto 3) <= tmp_s_fu_271_p3(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                x_1_reg_411 <= x_1_fu_289_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                y_1_reg_449 <= y_1_fu_337_p2;
            end if;
        end if;
    end process;
    tmp_1_reg_374(2 downto 0) <= "000";
    tmp_5_reg_380(28 downto 0) <= "00000000000000000000000000000";
    tmp_5_reg_380(32 downto 31) <= "00";
    tmp_5_reg_380(38 downto 37) <= "00";
    tmp_5_reg_380(44 downto 40) <= "00000";
    tmp_5_reg_380(46 downto 46) <= "0";
    tmp_5_reg_380(48 downto 48) <= "0";
    tmp_5_reg_380(51 downto 51) <= "0";
    tmp_5_reg_380(63 downto 53) <= "00111111110";
    j_cast3_reg_385(5 downto 4) <= "00";
    tmp_s_reg_403(2 downto 0) <= "000";
    tmp_9_reg_426(28 downto 0) <= "00000000000000000000000000000";
    tmp_9_reg_426(32 downto 31) <= "00";
    tmp_9_reg_426(38 downto 37) <= "00";
    tmp_9_reg_426(44 downto 40) <= "00000";
    tmp_9_reg_426(46 downto 46) <= "0";
    tmp_9_reg_426(48 downto 48) <= "0";
    tmp_9_reg_426(51 downto 51) <= "0";
    tmp_9_reg_426(63 downto 53) <= "00111111111";
    tmp_11_reg_436(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_207_p2, ap_CS_fsm_state3, exitcond2_fu_249_p2, ap_CS_fsm_state4, exitcond1_fu_283_p2, ap_CS_fsm_state6, exitcond_fu_331_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_207_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_249_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_283_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_331_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_207_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_207_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_207_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_207_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    constant_r_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state9, tmp_13_fu_304_p1, tmp_18_fu_358_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            constant_r_address0 <= tmp_18_fu_358_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            constant_r_address0 <= tmp_13_fu_304_p1(6 - 1 downto 0);
        else 
            constant_r_address0 <= "XXXXXX";
        end if; 
    end process;


    constant_r_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            constant_r_ce0 <= ap_const_logic_1;
        else 
            constant_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataIn_address0 <= tmp_15_fu_348_p1(6 - 1 downto 0);

    dataIn_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dataIn_ce0 <= ap_const_logic_1;
        else 
            dataIn_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataOut_address0 <= tmp_10_fu_362_p1(6 - 1 downto 0);

    dataOut_ce0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            dataOut_ce0 <= ap_const_logic_1;
        else 
            dataOut_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dataOut_we0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            dataOut_we0 <= ap_const_logic_1;
        else 
            dataOut_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_283_p2 <= "1" when (x_reg_139 = ap_const_lv4_8) else "0";
    exitcond2_fu_249_p2 <= "1" when (j_reg_116 = ap_const_lv4_8) else "0";
    exitcond3_fu_207_p2 <= "1" when (i_reg_105 = ap_const_lv4_8) else "0";
    exitcond_fu_331_p2 <= "1" when (y_reg_162 = ap_const_lv4_8) else "0";

    grp_fu_178_p0_assign_proc : process(dataIn_q0, reg_195, ap_CS_fsm_state7, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_178_p0 <= reg_195;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_178_p0 <= dataIn_q0;
        else 
            grp_fu_178_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_178_p1_assign_proc : process(constant_load_reg_441, ap_CS_fsm_state7, constant_load_1_reg_474, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_178_p1 <= constant_load_1_reg_474;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_178_p1 <= constant_load_reg_441;
        else 
            grp_fu_178_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_191_p0_assign_proc : process(reg_201, tmp_5_reg_380, ap_CS_fsm_state20, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_191_p0 <= reg_201;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_191_p0 <= tmp_5_reg_380;
        else 
            grp_fu_191_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_191_p1_assign_proc : process(tmp_9_reg_426, tmp_4_reg_484, ap_CS_fsm_state20, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_191_p1 <= tmp_4_reg_484;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_191_p1 <= tmp_9_reg_426;
        else 
            grp_fu_191_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_213_p2 <= std_logic_vector(unsigned(i_reg_105) + unsigned(ap_const_lv4_1));
    j_1_fu_255_p2 <= std_logic_vector(unsigned(j_reg_116) + unsigned(ap_const_lv4_1));
    j_cast3_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_116),6));
    tmp_10_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_431),64));
    tmp_11_fu_320_p3 <= (tmp_22_reg_416 & ap_const_lv3_0);
    tmp_12_fu_299_p2 <= std_logic_vector(unsigned(x_cast2_fu_279_p1) + unsigned(tmp_1_reg_374));
    tmp_13_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_299_p2),64));
    tmp_14_fu_343_p2 <= std_logic_vector(unsigned(tmp_11_reg_436) + unsigned(y_cast1_fu_327_p1));
    tmp_15_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_343_p2),64));
    tmp_17_fu_353_p2 <= std_logic_vector(unsigned(tmp_s_reg_403) + unsigned(y_cast1_fu_327_p1));
    tmp_18_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_reg_459),64));
    tmp_1_fu_229_p3 <= (tmp_20_fu_225_p1 & ap_const_lv3_0);
    tmp_20_fu_225_p1 <= i_reg_105(3 - 1 downto 0);
    tmp_21_fu_267_p1 <= j_reg_116(3 - 1 downto 0);
    tmp_22_fu_295_p1 <= x_reg_139(3 - 1 downto 0);
    tmp_2_fu_316_p2 <= std_logic_vector(unsigned(tmp_1_reg_374) + unsigned(j_cast3_reg_385));
    tmp_5_fu_237_p3 <= 
        ap_const_lv64_3FC6A09E60000000 when (tmp_fu_219_p2(0) = '1') else 
        ap_const_lv64_3FD0000000000000;
    tmp_6_fu_261_p2 <= "1" when (j_reg_116 = ap_const_lv4_0) else "0";
    tmp_9_fu_309_p3 <= 
        ap_const_lv64_3FE6A09E60000000 when (tmp_6_reg_398(0) = '1') else 
        ap_const_lv64_3FF0000000000000;
    tmp_fu_219_p2 <= "1" when (i_reg_105 = ap_const_lv4_0) else "0";
    tmp_s_fu_271_p3 <= (tmp_21_fu_267_p1 & ap_const_lv3_0);
    x_1_fu_289_p2 <= std_logic_vector(unsigned(x_reg_139) + unsigned(ap_const_lv4_1));
    x_cast2_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_reg_139),6));
    y_1_fu_337_p2 <= std_logic_vector(unsigned(y_reg_162) + unsigned(ap_const_lv4_1));
    y_cast1_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_reg_162),6));
end behav;
