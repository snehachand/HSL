// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dct,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35tcpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.608000,HLS_SYN_LAT=59857,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=16,HLS_SYN_FF=1494,HLS_SYN_LUT=1462,HLS_VERSION=2018_2}" *)

module dct (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 32'd1;
parameter    ap_ST_fsm_state2 = 32'd2;
parameter    ap_ST_fsm_state3 = 32'd4;
parameter    ap_ST_fsm_state4 = 32'd8;
parameter    ap_ST_fsm_state5 = 32'd16;
parameter    ap_ST_fsm_state6 = 32'd32;
parameter    ap_ST_fsm_state7 = 32'd64;
parameter    ap_ST_fsm_state8 = 32'd128;
parameter    ap_ST_fsm_state9 = 32'd256;
parameter    ap_ST_fsm_state10 = 32'd512;
parameter    ap_ST_fsm_state11 = 32'd1024;
parameter    ap_ST_fsm_state12 = 32'd2048;
parameter    ap_ST_fsm_state13 = 32'd4096;
parameter    ap_ST_fsm_state14 = 32'd8192;
parameter    ap_ST_fsm_state15 = 32'd16384;
parameter    ap_ST_fsm_state16 = 32'd32768;
parameter    ap_ST_fsm_state17 = 32'd65536;
parameter    ap_ST_fsm_state18 = 32'd131072;
parameter    ap_ST_fsm_state19 = 32'd262144;
parameter    ap_ST_fsm_state20 = 32'd524288;
parameter    ap_ST_fsm_state21 = 32'd1048576;
parameter    ap_ST_fsm_state22 = 32'd2097152;
parameter    ap_ST_fsm_state23 = 32'd4194304;
parameter    ap_ST_fsm_state24 = 32'd8388608;
parameter    ap_ST_fsm_state25 = 32'd16777216;
parameter    ap_ST_fsm_state26 = 32'd33554432;
parameter    ap_ST_fsm_state27 = 32'd67108864;
parameter    ap_ST_fsm_state28 = 32'd134217728;
parameter    ap_ST_fsm_state29 = 32'd268435456;
parameter    ap_ST_fsm_state30 = 32'd536870912;
parameter    ap_ST_fsm_state31 = 32'd1073741824;
parameter    ap_ST_fsm_state32 = 32'd2147483648;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 10;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [31:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [5:0] dataIn_address0;
reg    dataIn_ce0;
wire   [31:0] dataIn_q0;
wire   [5:0] dataOut_address0;
reg    dataOut_ce0;
reg    dataOut_we0;
reg   [5:0] constant_r_address0;
reg    constant_r_ce0;
wire   [31:0] constant_r_q0;
wire   [31:0] grp_fu_178_p2;
reg   [31:0] reg_195;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state14;
wire   [63:0] grp_fu_191_p2;
reg   [63:0] reg_201;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state31;
wire   [3:0] i_1_fu_213_p2;
reg   [3:0] i_1_reg_369;
wire    ap_CS_fsm_state2;
wire   [5:0] tmp_1_fu_229_p3;
reg   [5:0] tmp_1_reg_374;
wire   [0:0] exitcond3_fu_207_p2;
wire   [63:0] tmp_5_fu_237_p3;
reg   [63:0] tmp_5_reg_380;
wire   [5:0] j_cast3_fu_245_p1;
reg   [5:0] j_cast3_reg_385;
wire    ap_CS_fsm_state3;
wire   [3:0] j_1_fu_255_p2;
reg   [3:0] j_1_reg_393;
wire   [0:0] tmp_6_fu_261_p2;
reg   [0:0] tmp_6_reg_398;
wire   [0:0] exitcond2_fu_249_p2;
wire   [5:0] tmp_s_fu_271_p3;
reg   [5:0] tmp_s_reg_403;
wire   [3:0] x_1_fu_289_p2;
reg   [3:0] x_1_reg_411;
wire    ap_CS_fsm_state4;
wire   [2:0] tmp_22_fu_295_p1;
reg   [2:0] tmp_22_reg_416;
wire   [0:0] exitcond1_fu_283_p2;
wire   [63:0] tmp_9_fu_309_p3;
reg   [63:0] tmp_9_reg_426;
wire   [5:0] tmp_2_fu_316_p2;
reg   [5:0] tmp_2_reg_431;
wire   [5:0] tmp_11_fu_320_p3;
reg   [5:0] tmp_11_reg_436;
wire    ap_CS_fsm_state5;
reg   [31:0] constant_load_reg_441;
wire   [3:0] y_1_fu_337_p2;
reg   [3:0] y_1_reg_449;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_fu_331_p2;
wire   [5:0] tmp_17_fu_353_p2;
reg   [5:0] tmp_17_reg_459;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
reg   [31:0] constant_load_1_reg_474;
wire   [31:0] grp_fu_173_p2;
wire    ap_CS_fsm_state19;
wire   [63:0] tmp_4_fu_187_p1;
reg   [63:0] tmp_4_reg_484;
reg   [3:0] i_reg_105;
reg   [3:0] j_reg_116;
wire    ap_CS_fsm_state32;
reg   [31:0] ds_reg_127;
reg   [3:0] x_reg_139;
reg   [31:0] ds_1_reg_150;
reg   [3:0] y_reg_162;
wire   [63:0] tmp_13_fu_304_p1;
wire   [63:0] tmp_15_fu_348_p1;
wire   [63:0] tmp_18_fu_358_p1;
wire   [63:0] tmp_10_fu_362_p1;
wire   [31:0] tmp_8_fu_183_p1;
wire    ap_CS_fsm_state15;
reg   [31:0] grp_fu_178_p0;
reg   [31:0] grp_fu_178_p1;
wire    ap_CS_fsm_state11;
reg   [63:0] grp_fu_191_p0;
reg   [63:0] grp_fu_191_p1;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state26;
wire   [2:0] tmp_20_fu_225_p1;
wire   [0:0] tmp_fu_219_p2;
wire   [2:0] tmp_21_fu_267_p1;
wire   [5:0] x_cast2_fu_279_p1;
wire   [5:0] tmp_12_fu_299_p2;
wire   [5:0] y_cast1_fu_327_p1;
wire   [5:0] tmp_14_fu_343_p2;
reg   [31:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 32'd1;
end

dct_constant_r #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
constant_r_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(constant_r_address0),
    .ce0(constant_r_ce0),
    .q0(constant_r_q0)
);

dct_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
dct_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .dataIn_address0(dataIn_address0),
    .dataIn_ce0(dataIn_ce0),
    .dataIn_q0(dataIn_q0),
    .dataOut_address0(dataOut_address0),
    .dataOut_ce0(dataOut_ce0),
    .dataOut_we0(dataOut_we0),
    .dataOut_d0(tmp_8_fu_183_p1)
);

dct_fadd_32ns_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dct_fadd_32ns_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ds_1_reg_150),
    .din1(reg_195),
    .ce(1'b1),
    .dout(grp_fu_173_p2)
);

dct_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dct_fmul_32ns_32ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_178_p0),
    .din1(grp_fu_178_p1),
    .ce(1'b1),
    .dout(grp_fu_178_p2)
);

dct_fptrunc_64ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
dct_fptrunc_64ns_dEe_U3(
    .din0(reg_201),
    .dout(tmp_8_fu_183_p1)
);

dct_fpext_32ns_64eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
dct_fpext_32ns_64eOg_U4(
    .din0(ds_reg_127),
    .dout(tmp_4_fu_187_p1)
);

dct_dmul_64ns_64nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dct_dmul_64ns_64nfYi_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_191_p0),
    .din1(grp_fu_191_p1),
    .ce(1'b1),
    .dout(grp_fu_191_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ds_1_reg_150 <= ds_reg_127;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        ds_1_reg_150 <= grp_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_331_p2 == 1'd1))) begin
        ds_reg_127 <= ds_1_reg_150;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_249_p2 == 1'd0))) begin
        ds_reg_127 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_249_p2 == 1'd1))) begin
        i_reg_105 <= i_1_reg_369;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_105 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_207_p2 == 1'd0))) begin
        j_reg_116 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        j_reg_116 <= j_1_reg_393;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_331_p2 == 1'd1))) begin
        x_reg_139 <= x_1_reg_411;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_249_p2 == 1'd0))) begin
        x_reg_139 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        y_reg_162 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        y_reg_162 <= y_1_reg_449;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        constant_load_1_reg_474 <= constant_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        constant_load_reg_441 <= constant_r_q0;
        tmp_11_reg_436[5 : 3] <= tmp_11_fu_320_p3[5 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_369 <= i_1_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_393 <= j_1_fu_255_p2;
        j_cast3_reg_385[3 : 0] <= j_cast3_fu_245_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_195 <= grp_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state25))) begin
        reg_201 <= grp_fu_191_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_331_p2 == 1'd0))) begin
        tmp_17_reg_459 <= tmp_17_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_207_p2 == 1'd0))) begin
        tmp_1_reg_374[5 : 3] <= tmp_1_fu_229_p3[5 : 3];
        tmp_5_reg_380[30 : 29] <= tmp_5_fu_237_p3[30 : 29];
tmp_5_reg_380[36 : 33] <= tmp_5_fu_237_p3[36 : 33];
tmp_5_reg_380[39] <= tmp_5_fu_237_p3[39];
tmp_5_reg_380[45] <= tmp_5_fu_237_p3[45];
tmp_5_reg_380[47] <= tmp_5_fu_237_p3[47];
tmp_5_reg_380[50 : 49] <= tmp_5_fu_237_p3[50 : 49];
tmp_5_reg_380[52] <= tmp_5_fu_237_p3[52];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_283_p2 == 1'd0))) begin
        tmp_22_reg_416 <= tmp_22_fu_295_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_283_p2 == 1'd1))) begin
        tmp_2_reg_431 <= tmp_2_fu_316_p2;
        tmp_9_reg_426[30 : 29] <= tmp_9_fu_309_p3[30 : 29];
tmp_9_reg_426[36 : 33] <= tmp_9_fu_309_p3[36 : 33];
tmp_9_reg_426[39] <= tmp_9_fu_309_p3[39];
tmp_9_reg_426[45] <= tmp_9_fu_309_p3[45];
tmp_9_reg_426[47] <= tmp_9_fu_309_p3[47];
tmp_9_reg_426[50 : 49] <= tmp_9_fu_309_p3[50 : 49];
tmp_9_reg_426[52] <= tmp_9_fu_309_p3[52];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        tmp_4_reg_484 <= tmp_4_fu_187_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_249_p2 == 1'd0))) begin
        tmp_6_reg_398 <= tmp_6_fu_261_p2;
        tmp_s_reg_403[5 : 3] <= tmp_s_fu_271_p3[5 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_1_reg_411 <= x_1_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        y_1_reg_449 <= y_1_fu_337_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_207_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_207_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        constant_r_address0 = tmp_18_fu_358_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        constant_r_address0 = tmp_13_fu_304_p1;
    end else begin
        constant_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        constant_r_ce0 = 1'b1;
    end else begin
        constant_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        dataIn_ce0 = 1'b1;
    end else begin
        dataIn_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        dataOut_ce0 = 1'b1;
    end else begin
        dataOut_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        dataOut_we0 = 1'b1;
    end else begin
        dataOut_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_178_p0 = reg_195;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_178_p0 = dataIn_q0;
    end else begin
        grp_fu_178_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_178_p1 = constant_load_1_reg_474;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_178_p1 = constant_load_reg_441;
    end else begin
        grp_fu_178_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_191_p0 = reg_201;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_191_p0 = tmp_5_reg_380;
    end else begin
        grp_fu_191_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_191_p1 = tmp_4_reg_484;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_191_p1 = tmp_9_reg_426;
    end else begin
        grp_fu_191_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_207_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_249_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_283_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_331_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign dataIn_address0 = tmp_15_fu_348_p1;

assign dataOut_address0 = tmp_10_fu_362_p1;

assign exitcond1_fu_283_p2 = ((x_reg_139 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond2_fu_249_p2 = ((j_reg_116 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond3_fu_207_p2 = ((i_reg_105 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond_fu_331_p2 = ((y_reg_162 == 4'd8) ? 1'b1 : 1'b0);

assign i_1_fu_213_p2 = (i_reg_105 + 4'd1);

assign j_1_fu_255_p2 = (j_reg_116 + 4'd1);

assign j_cast3_fu_245_p1 = j_reg_116;

assign tmp_10_fu_362_p1 = tmp_2_reg_431;

assign tmp_11_fu_320_p3 = {{tmp_22_reg_416}, {3'd0}};

assign tmp_12_fu_299_p2 = (x_cast2_fu_279_p1 + tmp_1_reg_374);

assign tmp_13_fu_304_p1 = tmp_12_fu_299_p2;

assign tmp_14_fu_343_p2 = (tmp_11_reg_436 + y_cast1_fu_327_p1);

assign tmp_15_fu_348_p1 = tmp_14_fu_343_p2;

assign tmp_17_fu_353_p2 = (tmp_s_reg_403 + y_cast1_fu_327_p1);

assign tmp_18_fu_358_p1 = tmp_17_reg_459;

assign tmp_1_fu_229_p3 = {{tmp_20_fu_225_p1}, {3'd0}};

assign tmp_20_fu_225_p1 = i_reg_105[2:0];

assign tmp_21_fu_267_p1 = j_reg_116[2:0];

assign tmp_22_fu_295_p1 = x_reg_139[2:0];

assign tmp_2_fu_316_p2 = (tmp_1_reg_374 + j_cast3_reg_385);

assign tmp_5_fu_237_p3 = ((tmp_fu_219_p2[0:0] === 1'b1) ? 64'd4595537071854059520 : 64'd4598175219545276416);

assign tmp_6_fu_261_p2 = ((j_reg_116 == 4'd0) ? 1'b1 : 1'b0);

assign tmp_9_fu_309_p3 = ((tmp_6_reg_398[0:0] === 1'b1) ? 64'd4604544271108800512 : 64'd4607182418800017408);

assign tmp_fu_219_p2 = ((i_reg_105 == 4'd0) ? 1'b1 : 1'b0);

assign tmp_s_fu_271_p3 = {{tmp_21_fu_267_p1}, {3'd0}};

assign x_1_fu_289_p2 = (x_reg_139 + 4'd1);

assign x_cast2_fu_279_p1 = x_reg_139;

assign y_1_fu_337_p2 = (y_reg_162 + 4'd1);

assign y_cast1_fu_327_p1 = y_reg_162;

always @ (posedge ap_clk) begin
    tmp_1_reg_374[2:0] <= 3'b000;
    tmp_5_reg_380[28:0] <= 29'b00000000000000000000000000000;
    tmp_5_reg_380[32:31] <= 2'b00;
    tmp_5_reg_380[38:37] <= 2'b00;
    tmp_5_reg_380[44:40] <= 5'b00000;
    tmp_5_reg_380[46:46] <= 1'b0;
    tmp_5_reg_380[48:48] <= 1'b0;
    tmp_5_reg_380[51:51] <= 1'b0;
    tmp_5_reg_380[63:53] <= 11'b00111111110;
    j_cast3_reg_385[5:4] <= 2'b00;
    tmp_s_reg_403[2:0] <= 3'b000;
    tmp_9_reg_426[28:0] <= 29'b00000000000000000000000000000;
    tmp_9_reg_426[32:31] <= 2'b00;
    tmp_9_reg_426[38:37] <= 2'b00;
    tmp_9_reg_426[44:40] <= 5'b00000;
    tmp_9_reg_426[46:46] <= 1'b0;
    tmp_9_reg_426[48:48] <= 1'b0;
    tmp_9_reg_426[51:51] <= 1'b0;
    tmp_9_reg_426[63:53] <= 11'b00111111111;
    tmp_11_reg_436[2:0] <= 3'b000;
end

endmodule //dct
