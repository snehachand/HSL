-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FFT0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    FFT_stage : IN STD_LOGIC_VECTOR (5 downto 0);
    pass_check : IN STD_LOGIC_VECTOR (5 downto 0);
    index_shift : IN STD_LOGIC_VECTOR (3 downto 0);
    pass_shift : IN STD_LOGIC_VECTOR (3 downto 0);
    data_IN_M_real_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_IN_M_real_V_ce0 : OUT STD_LOGIC;
    data_IN_M_real_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_IN_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_IN_M_imag_V_ce0 : OUT STD_LOGIC;
    data_IN_M_imag_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_OUT_M_real_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_OUT_M_real_V_ce0 : OUT STD_LOGIC;
    data_OUT_M_real_V_we0 : OUT STD_LOGIC;
    data_OUT_M_real_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    data_OUT_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_OUT_M_imag_V_ce0 : OUT STD_LOGIC;
    data_OUT_M_imag_V_we0 : OUT STD_LOGIC;
    data_OUT_M_imag_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of FFT0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal W_M_real_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal W_M_real_V_ce0 : STD_LOGIC;
    signal W_M_real_V_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal W_M_imag_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal W_M_imag_V_ce0 : STD_LOGIC;
    signal W_M_imag_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal pass_shift_cast_fu_219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pass_shift_cast_reg_438 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_shift_cast_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_shift_cast_reg_443 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_stage_cast1_fu_227_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_stage_cast1_reg_448 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_cast_fu_241_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_cast_reg_453 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_cast_11_fu_255_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_cast_11_reg_458 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_265_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_466 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal Ulimit_fu_281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ulimit_reg_471 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal butterfly_span_2_fu_323_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal butterfly_span_2_reg_487 : STD_LOGIC_VECTOR (31 downto 0);
    signal butterfly_pass_2_fu_331_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal butterfly_pass_2_reg_492 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_497 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_r_M_real_V_reg_513 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_r_M_imag_V_reg_518 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_fu_349_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_1_reg_523 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_9_fu_356_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_reg_528 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp1_i_i_cast_fu_412_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp1_i_i_cast_reg_533 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_i_i_cast_fu_418_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_i_i_cast_reg_538 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_5_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_543 : STD_LOGIC_VECTOR (63 downto 0);
    signal complex_M_real_V_wr_1_fu_400_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal complex_M_real_V_wr_1_reg_559 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal complex_M_imag_V_wr_1_fu_406_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal complex_M_imag_V_wr_1_reg_564 : STD_LOGIC_VECTOR (15 downto 0);
    signal butterfly_span_reg_186 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal butterfly_pass_reg_197 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_208 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_287_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal complex_M_real_V_wr_fu_386_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal complex_M_imag_V_wr_fu_393_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_231_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_235_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_fu_245_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_249_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_276_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_fu_271_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal butterfly_pass_3_fu_309_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal butterfly_span_1_fu_298_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal butterfly_pass_1_fu_315_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Llimit_fu_339_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_424_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_431_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_3_fu_368_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_5_fu_377_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_i_i_cast_fu_412_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_353_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_i_i_cast_fu_418_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_424_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_424_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_fu_365_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_431_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_431_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component FFT_mul_mul_16s_1bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FFT_mac_mulsub_16cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FFT_mac_muladd_9sdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FFT0_W_M_real_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component FFT0_W_M_imag_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    W_M_real_V_U : component FFT0_W_M_real_V
    generic map (
        DataWidth => 10,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_M_real_V_address0,
        ce0 => W_M_real_V_ce0,
        q0 => W_M_real_V_q0);

    W_M_imag_V_U : component FFT0_W_M_imag_V
    generic map (
        DataWidth => 9,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_M_imag_V_address0,
        ce0 => W_M_imag_V_ce0,
        q0 => W_M_imag_V_q0);

    FFT_mul_mul_16s_1bkb_U1 : component FFT_mul_mul_16s_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 24)
    port map (
        din0 => data_IN_M_real_V_q0,
        din1 => tmp1_i_i_cast_fu_412_p1,
        dout => tmp1_i_i_cast_fu_412_p2);

    FFT_mul_mul_16s_1bkb_U2 : component FFT_mul_mul_16s_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 24)
    port map (
        din0 => data_IN_M_imag_V_q0,
        din1 => tmp_i_i_cast_fu_418_p1,
        dout => tmp_i_i_cast_fu_418_p2);

    FFT_mac_mulsub_16cud_U3 : component FFT_mac_mulsub_16cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        din0 => grp_fu_424_p0,
        din1 => grp_fu_424_p1,
        din2 => tmp1_i_i_cast_reg_533,
        dout => grp_fu_424_p3);

    FFT_mac_muladd_9sdEe_U4 : component FFT_mac_muladd_9sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        din0 => grp_fu_431_p0,
        din1 => grp_fu_431_p1,
        din2 => tmp_i_i_cast_reg_538,
        dout => grp_fu_431_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    butterfly_pass_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                butterfly_pass_reg_197 <= butterfly_pass_2_reg_492;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                butterfly_pass_reg_197 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    butterfly_span_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                butterfly_span_reg_186 <= butterfly_span_2_reg_487;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                butterfly_span_reg_186 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_reg_208 <= i_1_reg_466;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_208 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    FFT_stage_cast1_reg_448(5 downto 0) <= FFT_stage_cast1_fu_227_p1(5 downto 0);
                    index_shift_cast_reg_443(3 downto 0) <= index_shift_cast_fu_223_p1(3 downto 0);
                    pass_shift_cast_reg_438(3 downto 0) <= pass_shift_cast_fu_219_p1(3 downto 0);
                    tmp_cast_11_reg_458(4 downto 0) <= tmp_cast_11_fu_255_p1(4 downto 0);
                    tmp_cast_reg_453(4 downto 0) <= tmp_cast_fu_241_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_259_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                Ulimit_reg_471 <= Ulimit_fu_281_p2;
                butterfly_pass_2_reg_492 <= butterfly_pass_2_fu_331_p3;
                butterfly_span_2_reg_487 <= butterfly_span_2_fu_323_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                complex_M_imag_V_wr_1_reg_564 <= complex_M_imag_V_wr_1_fu_406_p2;
                complex_M_real_V_wr_1_reg_559 <= complex_M_real_V_wr_1_fu_400_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_466 <= i_1_fu_265_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                p_r_M_imag_V_reg_518 <= W_M_imag_V_q0;
                p_r_M_real_V_reg_513 <= W_M_real_V_q0;
                tmp_4_reg_497 <= tmp_4_fu_343_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp1_i_i_cast_reg_533 <= tmp1_i_i_cast_fu_412_p2;
                tmp_1_reg_523 <= tmp_1_fu_349_p1;
                tmp_5_reg_543 <= tmp_5_fu_360_p1;
                tmp_9_reg_528 <= tmp_9_fu_356_p1;
                tmp_i_i_cast_reg_538 <= tmp_i_i_cast_fu_418_p2;
            end if;
        end if;
    end process;
    pass_shift_cast_reg_438(31 downto 4) <= "0000000000000000000000000000";
    index_shift_cast_reg_443(31 downto 4) <= "0000000000000000000000000000";
    FFT_stage_cast1_reg_448(31 downto 6) <= "00000000000000000000000000";
    tmp_cast_reg_453(31 downto 5) <= "000000000000000000000000000";
    tmp_cast_11_reg_458(31 downto 5) <= "000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_259_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    FFT_stage_cast1_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(FFT_stage),32));
    Llimit_fu_339_p2 <= std_logic_vector(signed(Ulimit_reg_471) + signed(FFT_stage_cast1_reg_448));
    Ulimit_fu_281_p2 <= std_logic_vector(unsigned(tmp_2_fu_276_p2) + unsigned(butterfly_span_reg_186));
    W_M_imag_V_address0 <= tmp_3_fu_287_p1(4 - 1 downto 0);

    W_M_imag_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            W_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            W_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_M_real_V_address0 <= tmp_3_fu_287_p1(4 - 1 downto 0);

    W_M_real_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            W_M_real_V_ce0 <= ap_const_logic_1;
        else 
            W_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_259_p2)
    begin
        if ((((exitcond_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_259_p2)
    begin
        if (((exitcond_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    butterfly_pass_1_fu_315_p3 <= 
        butterfly_pass_3_fu_309_p2 when (tmp_7_fu_304_p2(0) = '1') else 
        ap_const_lv32_0;
    butterfly_pass_2_fu_331_p3 <= 
        butterfly_pass_reg_197 when (tmp_6_fu_293_p2(0) = '1') else 
        butterfly_pass_1_fu_315_p3;
    butterfly_pass_3_fu_309_p2 <= std_logic_vector(unsigned(butterfly_pass_reg_197) + unsigned(ap_const_lv32_1));
    butterfly_span_1_fu_298_p2 <= std_logic_vector(unsigned(butterfly_span_reg_186) + unsigned(ap_const_lv32_1));
    butterfly_span_2_fu_323_p3 <= 
        butterfly_span_1_fu_298_p2 when (tmp_6_fu_293_p2(0) = '1') else 
        ap_const_lv32_0;
    complex_M_imag_V_wr_1_fu_406_p2 <= std_logic_vector(unsigned(data_IN_M_imag_V_q0) + unsigned(p_Val2_5_fu_377_p4));
    complex_M_imag_V_wr_fu_393_p2 <= std_logic_vector(unsigned(data_IN_M_imag_V_q0) - unsigned(p_Val2_5_fu_377_p4));
    complex_M_real_V_wr_1_fu_400_p2 <= std_logic_vector(unsigned(data_IN_M_real_V_q0) + unsigned(p_Val2_3_fu_368_p4));
    complex_M_real_V_wr_fu_386_p2 <= std_logic_vector(unsigned(data_IN_M_real_V_q0) - unsigned(p_Val2_3_fu_368_p4));

    data_IN_M_imag_V_address0_assign_proc : process(tmp_4_fu_343_p1, ap_CS_fsm_state3, ap_CS_fsm_state4, tmp_5_fu_360_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_IN_M_imag_V_address0 <= tmp_5_fu_360_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_IN_M_imag_V_address0 <= tmp_4_fu_343_p1(5 - 1 downto 0);
        else 
            data_IN_M_imag_V_address0 <= "XXXXX";
        end if; 
    end process;


    data_IN_M_imag_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data_IN_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            data_IN_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_IN_M_real_V_address0_assign_proc : process(tmp_4_fu_343_p1, ap_CS_fsm_state3, ap_CS_fsm_state4, tmp_5_fu_360_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_IN_M_real_V_address0 <= tmp_5_fu_360_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_IN_M_real_V_address0 <= tmp_4_fu_343_p1(5 - 1 downto 0);
        else 
            data_IN_M_real_V_address0 <= "XXXXX";
        end if; 
    end process;


    data_IN_M_real_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data_IN_M_real_V_ce0 <= ap_const_logic_1;
        else 
            data_IN_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT_M_imag_V_address0_assign_proc : process(tmp_4_reg_497, tmp_5_reg_543, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT_M_imag_V_address0 <= tmp_5_reg_543(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_OUT_M_imag_V_address0 <= tmp_4_reg_497(5 - 1 downto 0);
        else 
            data_OUT_M_imag_V_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT_M_imag_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data_OUT_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            data_OUT_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT_M_imag_V_d0_assign_proc : process(ap_CS_fsm_state5, complex_M_imag_V_wr_1_reg_564, ap_CS_fsm_state6, complex_M_imag_V_wr_fu_393_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT_M_imag_V_d0 <= complex_M_imag_V_wr_1_reg_564;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_OUT_M_imag_V_d0 <= complex_M_imag_V_wr_fu_393_p2;
        else 
            data_OUT_M_imag_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_OUT_M_imag_V_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data_OUT_M_imag_V_we0 <= ap_const_logic_1;
        else 
            data_OUT_M_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT_M_real_V_address0_assign_proc : process(tmp_4_reg_497, tmp_5_reg_543, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT_M_real_V_address0 <= tmp_5_reg_543(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_OUT_M_real_V_address0 <= tmp_4_reg_497(5 - 1 downto 0);
        else 
            data_OUT_M_real_V_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT_M_real_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data_OUT_M_real_V_ce0 <= ap_const_logic_1;
        else 
            data_OUT_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT_M_real_V_d0_assign_proc : process(complex_M_real_V_wr_1_reg_559, ap_CS_fsm_state5, ap_CS_fsm_state6, complex_M_real_V_wr_fu_386_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT_M_real_V_d0 <= complex_M_real_V_wr_1_reg_559;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_OUT_M_real_V_d0 <= complex_M_real_V_wr_fu_386_p2;
        else 
            data_OUT_M_real_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_OUT_M_real_V_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data_OUT_M_real_V_we0 <= ap_const_logic_1;
        else 
            data_OUT_M_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_259_p2 <= "1" when (i_reg_208 = ap_const_lv5_10) else "0";
    grp_fu_424_p0 <= tmp_9_reg_528(16 - 1 downto 0);
    grp_fu_424_p1 <= tmp_10_fu_365_p1(9 - 1 downto 0);
    grp_fu_431_p0 <= tmp_10_fu_365_p1(9 - 1 downto 0);
    grp_fu_431_p1 <= tmp_1_reg_523(16 - 1 downto 0);
    i_1_fu_265_p2 <= std_logic_vector(unsigned(i_reg_208) + unsigned(ap_const_lv5_1));
    index_fu_271_p2 <= std_logic_vector(shift_left(unsigned(butterfly_span_reg_186),to_integer(unsigned('0' & index_shift_cast_reg_443(31-1 downto 0)))));
    index_shift_cast_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_shift),32));
    p_Val2_3_fu_368_p4 <= grp_fu_424_p3(23 downto 8);
    p_Val2_5_fu_377_p4 <= grp_fu_431_p3(23 downto 8);
    pass_shift_cast_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pass_shift),32));
    tmp1_i_i_cast_fu_412_p1 <= tmp_8_fu_353_p1(10 - 1 downto 0);
        tmp_10_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_r_M_imag_V_reg_518),24));

    tmp_11_fu_231_p1 <= FFT_stage(5 - 1 downto 0);
    tmp_12_fu_245_p1 <= pass_check(5 - 1 downto 0);
        tmp_1_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_IN_M_real_V_q0),24));

    tmp_2_fu_276_p2 <= std_logic_vector(shift_left(unsigned(butterfly_pass_reg_197),to_integer(unsigned('0' & pass_shift_cast_reg_438(31-1 downto 0)))));
        tmp_3_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(index_fu_271_p2),64));

        tmp_4_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Llimit_fu_339_p2),64));

        tmp_5_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ulimit_reg_471),64));

    tmp_6_fu_293_p2 <= "1" when (signed(butterfly_span_reg_186) < signed(tmp_cast_reg_453)) else "0";
    tmp_7_fu_304_p2 <= "1" when (signed(butterfly_pass_reg_197) < signed(tmp_cast_11_reg_458)) else "0";
        tmp_8_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_r_M_real_V_reg_513),24));

        tmp_9_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_IN_M_imag_V_q0),24));

    tmp_cast_11_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_249_p2),32));
    tmp_cast_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_235_p2),32));
    tmp_fu_235_p2 <= std_logic_vector(signed(ap_const_lv5_1F) + signed(tmp_11_fu_231_p1));
    tmp_i_i_cast_fu_418_p1 <= tmp_8_fu_353_p1(10 - 1 downto 0);
    tmp_s_fu_249_p2 <= std_logic_vector(signed(ap_const_lv5_1F) + signed(tmp_12_fu_245_p1));
end behav;
