-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FFT is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_IN_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    data_IN_TVALID : IN STD_LOGIC;
    data_IN_TREADY : OUT STD_LOGIC;
    data_OUT_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_OUT_TVALID : OUT STD_LOGIC;
    data_OUT_TREADY : IN STD_LOGIC );
end;


architecture behav of FFT is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "FFT,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.779000,HLS_SYN_LAT=673,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=1144,HLS_SYN_LUT=1880,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal data_IN_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal data_IN_0_vld_in : STD_LOGIC;
    signal data_IN_0_vld_out : STD_LOGIC;
    signal data_IN_0_ack_in : STD_LOGIC;
    signal data_IN_0_ack_out : STD_LOGIC;
    signal data_IN_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal data_IN_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal data_IN_0_sel_rd : STD_LOGIC := '0';
    signal data_IN_0_sel_wr : STD_LOGIC := '0';
    signal data_IN_0_sel : STD_LOGIC;
    signal data_IN_0_load_A : STD_LOGIC;
    signal data_IN_0_load_B : STD_LOGIC;
    signal data_IN_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal data_IN_0_state_cmp_full : STD_LOGIC;
    signal data_OUT_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal data_OUT_1_vld_in : STD_LOGIC;
    signal data_OUT_1_vld_out : STD_LOGIC;
    signal data_OUT_1_ack_in : STD_LOGIC;
    signal data_OUT_1_ack_out : STD_LOGIC;
    signal data_OUT_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal data_OUT_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal data_OUT_1_sel_rd : STD_LOGIC := '0';
    signal data_OUT_1_sel_wr : STD_LOGIC := '0';
    signal data_OUT_1_sel : STD_LOGIC;
    signal data_OUT_1_load_A : STD_LOGIC;
    signal data_OUT_1_load_B : STD_LOGIC;
    signal data_OUT_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal data_OUT_1_state_cmp_full : STD_LOGIC;
    signal xin_M_real_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal xin_M_real_V_ce0 : STD_LOGIC;
    signal xin_M_real_V_we0 : STD_LOGIC;
    signal xin_M_real_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal xin_M_real_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal xin_M_imag_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal xin_M_imag_V_ce0 : STD_LOGIC;
    signal xin_M_imag_V_we0 : STD_LOGIC;
    signal xin_M_imag_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal xin_M_imag_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal rev_32_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rev_32_ce0 : STD_LOGIC;
    signal rev_32_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT0_M_real_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT0_M_real_V_ce0 : STD_LOGIC;
    signal data_OUT0_M_real_V_we0 : STD_LOGIC;
    signal data_OUT0_M_real_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_OUT0_M_imag_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT0_M_imag_V_ce0 : STD_LOGIC;
    signal data_OUT0_M_imag_V_we0 : STD_LOGIC;
    signal data_OUT0_M_imag_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_OUT1_M_real_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT1_M_real_V_ce0 : STD_LOGIC;
    signal data_OUT1_M_real_V_we0 : STD_LOGIC;
    signal data_OUT1_M_real_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_OUT1_M_imag_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT1_M_imag_V_ce0 : STD_LOGIC;
    signal data_OUT1_M_imag_V_we0 : STD_LOGIC;
    signal data_OUT1_M_imag_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_OUT2_M_real_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT2_M_real_V_ce0 : STD_LOGIC;
    signal data_OUT2_M_real_V_we0 : STD_LOGIC;
    signal data_OUT2_M_real_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_OUT2_M_imag_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT2_M_imag_V_ce0 : STD_LOGIC;
    signal data_OUT2_M_imag_V_we0 : STD_LOGIC;
    signal data_OUT2_M_imag_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_OUT3_M_real_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT3_M_real_V_ce0 : STD_LOGIC;
    signal data_OUT3_M_real_V_we0 : STD_LOGIC;
    signal data_OUT3_M_real_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_OUT3_M_imag_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT3_M_imag_V_ce0 : STD_LOGIC;
    signal data_OUT3_M_imag_V_we0 : STD_LOGIC;
    signal data_OUT3_M_imag_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_OUT4_M_real_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT4_M_real_V_ce0 : STD_LOGIC;
    signal data_OUT4_M_real_V_we0 : STD_LOGIC;
    signal data_OUT4_M_real_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_OUT4_M_imag_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT4_M_imag_V_ce0 : STD_LOGIC;
    signal data_OUT4_M_imag_V_we0 : STD_LOGIC;
    signal data_OUT4_M_imag_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal xout_M_real_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal xout_M_real_V_ce0 : STD_LOGIC;
    signal xout_M_real_V_we0 : STD_LOGIC;
    signal xout_M_real_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal xout_M_imag_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal xout_M_imag_V_ce0 : STD_LOGIC;
    signal xout_M_imag_V_we0 : STD_LOGIC;
    signal xout_M_imag_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_IN_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal data_OUT_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal i_2_fu_324_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_reg_405 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_3_fu_358_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_3_reg_413 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_i_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_reg_418 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_4_fu_381_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_4_reg_442 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal exitcond_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_OUT_M_imag_V_a_fu_393_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_FFT0_fu_262_ap_start : STD_LOGIC;
    signal grp_FFT0_fu_262_ap_done : STD_LOGIC;
    signal grp_FFT0_fu_262_ap_idle : STD_LOGIC;
    signal grp_FFT0_fu_262_ap_ready : STD_LOGIC;
    signal grp_FFT0_fu_262_FFT_stage : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_FFT0_fu_262_pass_check : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_FFT0_fu_262_index_shift : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_FFT0_fu_262_pass_shift : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_FFT0_fu_262_data_IN_M_real_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_FFT0_fu_262_data_IN_M_real_V_ce0 : STD_LOGIC;
    signal grp_FFT0_fu_262_data_IN_M_real_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_FFT0_fu_262_data_IN_M_imag_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_FFT0_fu_262_data_IN_M_imag_V_ce0 : STD_LOGIC;
    signal grp_FFT0_fu_262_data_IN_M_imag_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_FFT0_fu_262_data_OUT_M_real_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_FFT0_fu_262_data_OUT_M_real_V_ce0 : STD_LOGIC;
    signal grp_FFT0_fu_262_data_OUT_M_real_V_we0 : STD_LOGIC;
    signal grp_FFT0_fu_262_data_OUT_M_real_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_FFT0_fu_262_data_OUT_M_imag_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_FFT0_fu_262_data_OUT_M_imag_V_ce0 : STD_LOGIC;
    signal grp_FFT0_fu_262_data_OUT_M_imag_V_we0 : STD_LOGIC;
    signal grp_FFT0_fu_262_data_OUT_M_imag_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_228 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_i_reg_240 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond1_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_reg_251 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_FFT0_fu_262_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_s_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_13_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);

    component FFT0 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        FFT_stage : IN STD_LOGIC_VECTOR (5 downto 0);
        pass_check : IN STD_LOGIC_VECTOR (5 downto 0);
        index_shift : IN STD_LOGIC_VECTOR (3 downto 0);
        pass_shift : IN STD_LOGIC_VECTOR (3 downto 0);
        data_IN_M_real_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_IN_M_real_V_ce0 : OUT STD_LOGIC;
        data_IN_M_real_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_IN_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_IN_M_imag_V_ce0 : OUT STD_LOGIC;
        data_IN_M_imag_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_OUT_M_real_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_OUT_M_real_V_ce0 : OUT STD_LOGIC;
        data_OUT_M_real_V_we0 : OUT STD_LOGIC;
        data_OUT_M_real_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        data_OUT_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_OUT_M_imag_V_ce0 : OUT STD_LOGIC;
        data_OUT_M_imag_V_we0 : OUT STD_LOGIC;
        data_OUT_M_imag_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component FFT_xin_M_real_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component FFT_rev_32 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;



begin
    xin_M_real_V_U : component FFT_xin_M_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xin_M_real_V_address0,
        ce0 => xin_M_real_V_ce0,
        we0 => xin_M_real_V_we0,
        d0 => xin_M_real_V_d0,
        q0 => xin_M_real_V_q0);

    xin_M_imag_V_U : component FFT_xin_M_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xin_M_imag_V_address0,
        ce0 => xin_M_imag_V_ce0,
        we0 => xin_M_imag_V_we0,
        d0 => xin_M_imag_V_d0,
        q0 => xin_M_imag_V_q0);

    rev_32_U : component FFT_rev_32
    generic map (
        DataWidth => 5,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => rev_32_address0,
        ce0 => rev_32_ce0,
        q0 => rev_32_q0);

    data_OUT0_M_real_V_U : component FFT_xin_M_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT0_M_real_V_address0,
        ce0 => data_OUT0_M_real_V_ce0,
        we0 => data_OUT0_M_real_V_we0,
        d0 => xin_M_real_V_q0,
        q0 => data_OUT0_M_real_V_q0);

    data_OUT0_M_imag_V_U : component FFT_xin_M_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT0_M_imag_V_address0,
        ce0 => data_OUT0_M_imag_V_ce0,
        we0 => data_OUT0_M_imag_V_we0,
        d0 => xin_M_imag_V_q0,
        q0 => data_OUT0_M_imag_V_q0);

    data_OUT1_M_real_V_U : component FFT_xin_M_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT1_M_real_V_address0,
        ce0 => data_OUT1_M_real_V_ce0,
        we0 => data_OUT1_M_real_V_we0,
        d0 => grp_FFT0_fu_262_data_OUT_M_real_V_d0,
        q0 => data_OUT1_M_real_V_q0);

    data_OUT1_M_imag_V_U : component FFT_xin_M_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT1_M_imag_V_address0,
        ce0 => data_OUT1_M_imag_V_ce0,
        we0 => data_OUT1_M_imag_V_we0,
        d0 => grp_FFT0_fu_262_data_OUT_M_imag_V_d0,
        q0 => data_OUT1_M_imag_V_q0);

    data_OUT2_M_real_V_U : component FFT_xin_M_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT2_M_real_V_address0,
        ce0 => data_OUT2_M_real_V_ce0,
        we0 => data_OUT2_M_real_V_we0,
        d0 => grp_FFT0_fu_262_data_OUT_M_real_V_d0,
        q0 => data_OUT2_M_real_V_q0);

    data_OUT2_M_imag_V_U : component FFT_xin_M_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT2_M_imag_V_address0,
        ce0 => data_OUT2_M_imag_V_ce0,
        we0 => data_OUT2_M_imag_V_we0,
        d0 => grp_FFT0_fu_262_data_OUT_M_imag_V_d0,
        q0 => data_OUT2_M_imag_V_q0);

    data_OUT3_M_real_V_U : component FFT_xin_M_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT3_M_real_V_address0,
        ce0 => data_OUT3_M_real_V_ce0,
        we0 => data_OUT3_M_real_V_we0,
        d0 => grp_FFT0_fu_262_data_OUT_M_real_V_d0,
        q0 => data_OUT3_M_real_V_q0);

    data_OUT3_M_imag_V_U : component FFT_xin_M_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT3_M_imag_V_address0,
        ce0 => data_OUT3_M_imag_V_ce0,
        we0 => data_OUT3_M_imag_V_we0,
        d0 => grp_FFT0_fu_262_data_OUT_M_imag_V_d0,
        q0 => data_OUT3_M_imag_V_q0);

    data_OUT4_M_real_V_U : component FFT_xin_M_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT4_M_real_V_address0,
        ce0 => data_OUT4_M_real_V_ce0,
        we0 => data_OUT4_M_real_V_we0,
        d0 => grp_FFT0_fu_262_data_OUT_M_real_V_d0,
        q0 => data_OUT4_M_real_V_q0);

    data_OUT4_M_imag_V_U : component FFT_xin_M_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT4_M_imag_V_address0,
        ce0 => data_OUT4_M_imag_V_ce0,
        we0 => data_OUT4_M_imag_V_we0,
        d0 => grp_FFT0_fu_262_data_OUT_M_imag_V_d0,
        q0 => data_OUT4_M_imag_V_q0);

    xout_M_real_V_U : component FFT_xin_M_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xout_M_real_V_address0,
        ce0 => xout_M_real_V_ce0,
        we0 => xout_M_real_V_we0,
        d0 => grp_FFT0_fu_262_data_OUT_M_real_V_d0,
        q0 => xout_M_real_V_q0);

    xout_M_imag_V_U : component FFT_xin_M_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xout_M_imag_V_address0,
        ce0 => xout_M_imag_V_ce0,
        we0 => xout_M_imag_V_we0,
        d0 => grp_FFT0_fu_262_data_OUT_M_imag_V_d0,
        q0 => xout_M_imag_V_q0);

    grp_FFT0_fu_262 : component FFT0
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_FFT0_fu_262_ap_start,
        ap_done => grp_FFT0_fu_262_ap_done,
        ap_idle => grp_FFT0_fu_262_ap_idle,
        ap_ready => grp_FFT0_fu_262_ap_ready,
        FFT_stage => grp_FFT0_fu_262_FFT_stage,
        pass_check => grp_FFT0_fu_262_pass_check,
        index_shift => grp_FFT0_fu_262_index_shift,
        pass_shift => grp_FFT0_fu_262_pass_shift,
        data_IN_M_real_V_address0 => grp_FFT0_fu_262_data_IN_M_real_V_address0,
        data_IN_M_real_V_ce0 => grp_FFT0_fu_262_data_IN_M_real_V_ce0,
        data_IN_M_real_V_q0 => grp_FFT0_fu_262_data_IN_M_real_V_q0,
        data_IN_M_imag_V_address0 => grp_FFT0_fu_262_data_IN_M_imag_V_address0,
        data_IN_M_imag_V_ce0 => grp_FFT0_fu_262_data_IN_M_imag_V_ce0,
        data_IN_M_imag_V_q0 => grp_FFT0_fu_262_data_IN_M_imag_V_q0,
        data_OUT_M_real_V_address0 => grp_FFT0_fu_262_data_OUT_M_real_V_address0,
        data_OUT_M_real_V_ce0 => grp_FFT0_fu_262_data_OUT_M_real_V_ce0,
        data_OUT_M_real_V_we0 => grp_FFT0_fu_262_data_OUT_M_real_V_we0,
        data_OUT_M_real_V_d0 => grp_FFT0_fu_262_data_OUT_M_real_V_d0,
        data_OUT_M_imag_V_address0 => grp_FFT0_fu_262_data_OUT_M_imag_V_address0,
        data_OUT_M_imag_V_ce0 => grp_FFT0_fu_262_data_OUT_M_imag_V_ce0,
        data_OUT_M_imag_V_we0 => grp_FFT0_fu_262_data_OUT_M_imag_V_we0,
        data_OUT_M_imag_V_d0 => grp_FFT0_fu_262_data_OUT_M_imag_V_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    data_IN_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_IN_0_sel_rd <= ap_const_logic_0;
            else
                if (((data_IN_0_ack_out = ap_const_logic_1) and (data_IN_0_vld_out = ap_const_logic_1))) then 
                                        data_IN_0_sel_rd <= not(data_IN_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    data_IN_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_IN_0_sel_wr <= ap_const_logic_0;
            else
                if (((data_IN_0_ack_in = ap_const_logic_1) and (data_IN_0_vld_in = ap_const_logic_1))) then 
                                        data_IN_0_sel_wr <= not(data_IN_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    data_IN_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_IN_0_state <= ap_const_lv2_0;
            else
                if ((((data_IN_0_state = ap_const_lv2_2) and (data_IN_0_vld_in = ap_const_logic_0)) or ((data_IN_0_state = ap_const_lv2_3) and (data_IN_0_vld_in = ap_const_logic_0) and (data_IN_0_ack_out = ap_const_logic_1)))) then 
                    data_IN_0_state <= ap_const_lv2_2;
                elsif ((((data_IN_0_state = ap_const_lv2_1) and (data_IN_0_ack_out = ap_const_logic_0)) or ((data_IN_0_state = ap_const_lv2_3) and (data_IN_0_ack_out = ap_const_logic_0) and (data_IN_0_vld_in = ap_const_logic_1)))) then 
                    data_IN_0_state <= ap_const_lv2_1;
                elsif (((not(((data_IN_0_vld_in = ap_const_logic_0) and (data_IN_0_ack_out = ap_const_logic_1))) and not(((data_IN_0_ack_out = ap_const_logic_0) and (data_IN_0_vld_in = ap_const_logic_1))) and (data_IN_0_state = ap_const_lv2_3)) or ((data_IN_0_state = ap_const_lv2_1) and (data_IN_0_ack_out = ap_const_logic_1)) or ((data_IN_0_state = ap_const_lv2_2) and (data_IN_0_vld_in = ap_const_logic_1)))) then 
                    data_IN_0_state <= ap_const_lv2_3;
                else 
                    data_IN_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    data_OUT_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_OUT_1_sel_rd <= ap_const_logic_0;
            else
                if (((data_OUT_1_ack_out = ap_const_logic_1) and (data_OUT_1_vld_out = ap_const_logic_1))) then 
                                        data_OUT_1_sel_rd <= not(data_OUT_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    data_OUT_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_OUT_1_sel_wr <= ap_const_logic_0;
            else
                if (((data_OUT_1_ack_in = ap_const_logic_1) and (data_OUT_1_vld_in = ap_const_logic_1))) then 
                                        data_OUT_1_sel_wr <= not(data_OUT_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    data_OUT_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_OUT_1_state <= ap_const_lv2_0;
            else
                if ((((data_OUT_1_state = ap_const_lv2_2) and (data_OUT_1_vld_in = ap_const_logic_0)) or ((data_OUT_1_state = ap_const_lv2_3) and (data_OUT_1_vld_in = ap_const_logic_0) and (data_OUT_1_ack_out = ap_const_logic_1)))) then 
                    data_OUT_1_state <= ap_const_lv2_2;
                elsif ((((data_OUT_1_state = ap_const_lv2_1) and (data_OUT_1_ack_out = ap_const_logic_0)) or ((data_OUT_1_state = ap_const_lv2_3) and (data_OUT_1_ack_out = ap_const_logic_0) and (data_OUT_1_vld_in = ap_const_logic_1)))) then 
                    data_OUT_1_state <= ap_const_lv2_1;
                elsif (((not(((data_OUT_1_vld_in = ap_const_logic_0) and (data_OUT_1_ack_out = ap_const_logic_1))) and not(((data_OUT_1_ack_out = ap_const_logic_0) and (data_OUT_1_vld_in = ap_const_logic_1))) and (data_OUT_1_state = ap_const_lv2_3)) or ((data_OUT_1_state = ap_const_lv2_1) and (data_OUT_1_ack_out = ap_const_logic_1)) or ((data_OUT_1_state = ap_const_lv2_2) and (data_OUT_1_vld_in = ap_const_logic_1)))) then 
                    data_OUT_1_state <= ap_const_lv2_3;
                else 
                    data_OUT_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    grp_FFT0_fu_262_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_FFT0_fu_262_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((exitcond_i_fu_352_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
                    grp_FFT0_fu_262_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_FFT0_fu_262_ap_ready = ap_const_logic_1)) then 
                    grp_FFT0_fu_262_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (data_OUT_1_ack_in = ap_const_logic_1))) then 
                i1_reg_251 <= i_4_reg_442;
            elsif (((grp_FFT0_fu_262_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                i1_reg_251 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_i_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_318_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_i_reg_240 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_i_reg_240 <= i_3_reg_413;
            end if; 
        end if;
    end process;

    i_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_IN_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_228 <= i_2_reg_405;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_228 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((data_IN_0_load_A = ap_const_logic_1)) then
                data_IN_0_payload_A <= data_IN_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((data_IN_0_load_B = ap_const_logic_1)) then
                data_IN_0_payload_B <= data_IN_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((data_OUT_1_load_A = ap_const_logic_1)) then
                data_OUT_1_payload_A <= data_OUT_M_imag_V_a_fu_393_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((data_OUT_1_load_B = ap_const_logic_1)) then
                data_OUT_1_payload_B <= data_OUT_M_imag_V_a_fu_393_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_405 <= i_2_fu_324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_3_reg_413 <= i_3_fu_358_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (data_OUT_1_ack_in = ap_const_logic_1))) then
                i_4_reg_442 <= i_4_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_352_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_i_reg_418(5 downto 0) <= tmp_i_fu_364_p1(5 downto 0);
            end if;
        end if;
    end process;
    tmp_i_reg_418(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, data_IN_0_vld_out, data_OUT_1_ack_in, ap_CS_fsm_state3, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state2, ap_CS_fsm_state4, exitcond_i_fu_352_p2, ap_CS_fsm_state16, exitcond_fu_375_p2, grp_FFT0_fu_262_ap_done, exitcond1_fu_318_p2, ap_CS_fsm_state15, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_318_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((data_IN_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond_i_fu_352_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state7 => 
                if (((grp_FFT0_fu_262_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((grp_FFT0_fu_262_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((grp_FFT0_fu_262_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_FFT0_fu_262_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((grp_FFT0_fu_262_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((exitcond_fu_375_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16) and (data_OUT_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((exitcond_fu_375_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16) and (data_OUT_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (data_OUT_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (data_OUT_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(data_OUT_1_ack_in, ap_CS_fsm_state16, exitcond_fu_375_p2)
    begin
        if (((exitcond_fu_375_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16) and (data_OUT_1_ack_in = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(data_OUT_1_ack_in, ap_CS_fsm_state16, exitcond_fu_375_p2)
    begin
        if (((exitcond_fu_375_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16) and (data_OUT_1_ack_in = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    data_IN_0_ack_in <= data_IN_0_state(1);

    data_IN_0_ack_out_assign_proc : process(data_IN_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((data_IN_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data_IN_0_ack_out <= ap_const_logic_1;
        else 
            data_IN_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    data_IN_0_data_out_assign_proc : process(data_IN_0_payload_A, data_IN_0_payload_B, data_IN_0_sel)
    begin
        if ((data_IN_0_sel = ap_const_logic_1)) then 
            data_IN_0_data_out <= data_IN_0_payload_B;
        else 
            data_IN_0_data_out <= data_IN_0_payload_A;
        end if; 
    end process;

    data_IN_0_load_A <= (not(data_IN_0_sel_wr) and data_IN_0_state_cmp_full);
    data_IN_0_load_B <= (data_IN_0_state_cmp_full and data_IN_0_sel_wr);
    data_IN_0_sel <= data_IN_0_sel_rd;
    data_IN_0_state_cmp_full <= '0' when (data_IN_0_state = ap_const_lv2_1) else '1';
    data_IN_0_vld_in <= data_IN_TVALID;
    data_IN_0_vld_out <= data_IN_0_state(0);

    data_IN_TDATA_blk_n_assign_proc : process(data_IN_0_state, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_IN_TDATA_blk_n <= data_IN_0_state(0);
        else 
            data_IN_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_IN_TREADY <= data_IN_0_state(1);

    data_OUT0_M_imag_V_address0_assign_proc : process(tmp_i_reg_418, grp_FFT0_fu_262_data_IN_M_imag_V_address0, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT0_M_imag_V_address0 <= tmp_i_reg_418(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_OUT0_M_imag_V_address0 <= grp_FFT0_fu_262_data_IN_M_imag_V_address0;
        else 
            data_OUT0_M_imag_V_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT0_M_imag_V_ce0_assign_proc : process(grp_FFT0_fu_262_data_IN_M_imag_V_ce0, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT0_M_imag_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_OUT0_M_imag_V_ce0 <= grp_FFT0_fu_262_data_IN_M_imag_V_ce0;
        else 
            data_OUT0_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT0_M_imag_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT0_M_imag_V_we0 <= ap_const_logic_1;
        else 
            data_OUT0_M_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT0_M_real_V_address0_assign_proc : process(tmp_i_reg_418, grp_FFT0_fu_262_data_IN_M_real_V_address0, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT0_M_real_V_address0 <= tmp_i_reg_418(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_OUT0_M_real_V_address0 <= grp_FFT0_fu_262_data_IN_M_real_V_address0;
        else 
            data_OUT0_M_real_V_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT0_M_real_V_ce0_assign_proc : process(grp_FFT0_fu_262_data_IN_M_real_V_ce0, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT0_M_real_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_OUT0_M_real_V_ce0 <= grp_FFT0_fu_262_data_IN_M_real_V_ce0;
        else 
            data_OUT0_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT0_M_real_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT0_M_real_V_we0 <= ap_const_logic_1;
        else 
            data_OUT0_M_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT1_M_imag_V_address0_assign_proc : process(grp_FFT0_fu_262_data_IN_M_imag_V_address0, grp_FFT0_fu_262_data_OUT_M_imag_V_address0, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_OUT1_M_imag_V_address0 <= grp_FFT0_fu_262_data_OUT_M_imag_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_OUT1_M_imag_V_address0 <= grp_FFT0_fu_262_data_IN_M_imag_V_address0;
        else 
            data_OUT1_M_imag_V_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT1_M_imag_V_ce0_assign_proc : process(grp_FFT0_fu_262_data_IN_M_imag_V_ce0, grp_FFT0_fu_262_data_OUT_M_imag_V_ce0, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_OUT1_M_imag_V_ce0 <= grp_FFT0_fu_262_data_OUT_M_imag_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_OUT1_M_imag_V_ce0 <= grp_FFT0_fu_262_data_IN_M_imag_V_ce0;
        else 
            data_OUT1_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT1_M_imag_V_we0_assign_proc : process(grp_FFT0_fu_262_data_OUT_M_imag_V_we0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_OUT1_M_imag_V_we0 <= grp_FFT0_fu_262_data_OUT_M_imag_V_we0;
        else 
            data_OUT1_M_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT1_M_real_V_address0_assign_proc : process(grp_FFT0_fu_262_data_IN_M_real_V_address0, grp_FFT0_fu_262_data_OUT_M_real_V_address0, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_OUT1_M_real_V_address0 <= grp_FFT0_fu_262_data_OUT_M_real_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_OUT1_M_real_V_address0 <= grp_FFT0_fu_262_data_IN_M_real_V_address0;
        else 
            data_OUT1_M_real_V_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT1_M_real_V_ce0_assign_proc : process(grp_FFT0_fu_262_data_IN_M_real_V_ce0, grp_FFT0_fu_262_data_OUT_M_real_V_ce0, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_OUT1_M_real_V_ce0 <= grp_FFT0_fu_262_data_OUT_M_real_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_OUT1_M_real_V_ce0 <= grp_FFT0_fu_262_data_IN_M_real_V_ce0;
        else 
            data_OUT1_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT1_M_real_V_we0_assign_proc : process(grp_FFT0_fu_262_data_OUT_M_real_V_we0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_OUT1_M_real_V_we0 <= grp_FFT0_fu_262_data_OUT_M_real_V_we0;
        else 
            data_OUT1_M_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT2_M_imag_V_address0_assign_proc : process(grp_FFT0_fu_262_data_IN_M_imag_V_address0, grp_FFT0_fu_262_data_OUT_M_imag_V_address0, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_OUT2_M_imag_V_address0 <= grp_FFT0_fu_262_data_OUT_M_imag_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_OUT2_M_imag_V_address0 <= grp_FFT0_fu_262_data_IN_M_imag_V_address0;
        else 
            data_OUT2_M_imag_V_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT2_M_imag_V_ce0_assign_proc : process(grp_FFT0_fu_262_data_IN_M_imag_V_ce0, grp_FFT0_fu_262_data_OUT_M_imag_V_ce0, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_OUT2_M_imag_V_ce0 <= grp_FFT0_fu_262_data_OUT_M_imag_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_OUT2_M_imag_V_ce0 <= grp_FFT0_fu_262_data_IN_M_imag_V_ce0;
        else 
            data_OUT2_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT2_M_imag_V_we0_assign_proc : process(grp_FFT0_fu_262_data_OUT_M_imag_V_we0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_OUT2_M_imag_V_we0 <= grp_FFT0_fu_262_data_OUT_M_imag_V_we0;
        else 
            data_OUT2_M_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT2_M_real_V_address0_assign_proc : process(grp_FFT0_fu_262_data_IN_M_real_V_address0, grp_FFT0_fu_262_data_OUT_M_real_V_address0, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_OUT2_M_real_V_address0 <= grp_FFT0_fu_262_data_OUT_M_real_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_OUT2_M_real_V_address0 <= grp_FFT0_fu_262_data_IN_M_real_V_address0;
        else 
            data_OUT2_M_real_V_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT2_M_real_V_ce0_assign_proc : process(grp_FFT0_fu_262_data_IN_M_real_V_ce0, grp_FFT0_fu_262_data_OUT_M_real_V_ce0, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_OUT2_M_real_V_ce0 <= grp_FFT0_fu_262_data_OUT_M_real_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_OUT2_M_real_V_ce0 <= grp_FFT0_fu_262_data_IN_M_real_V_ce0;
        else 
            data_OUT2_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT2_M_real_V_we0_assign_proc : process(grp_FFT0_fu_262_data_OUT_M_real_V_we0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_OUT2_M_real_V_we0 <= grp_FFT0_fu_262_data_OUT_M_real_V_we0;
        else 
            data_OUT2_M_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT3_M_imag_V_address0_assign_proc : process(grp_FFT0_fu_262_data_IN_M_imag_V_address0, grp_FFT0_fu_262_data_OUT_M_imag_V_address0, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_OUT3_M_imag_V_address0 <= grp_FFT0_fu_262_data_OUT_M_imag_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_OUT3_M_imag_V_address0 <= grp_FFT0_fu_262_data_IN_M_imag_V_address0;
        else 
            data_OUT3_M_imag_V_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT3_M_imag_V_ce0_assign_proc : process(grp_FFT0_fu_262_data_IN_M_imag_V_ce0, grp_FFT0_fu_262_data_OUT_M_imag_V_ce0, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_OUT3_M_imag_V_ce0 <= grp_FFT0_fu_262_data_OUT_M_imag_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_OUT3_M_imag_V_ce0 <= grp_FFT0_fu_262_data_IN_M_imag_V_ce0;
        else 
            data_OUT3_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT3_M_imag_V_we0_assign_proc : process(grp_FFT0_fu_262_data_OUT_M_imag_V_we0, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_OUT3_M_imag_V_we0 <= grp_FFT0_fu_262_data_OUT_M_imag_V_we0;
        else 
            data_OUT3_M_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT3_M_real_V_address0_assign_proc : process(grp_FFT0_fu_262_data_IN_M_real_V_address0, grp_FFT0_fu_262_data_OUT_M_real_V_address0, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_OUT3_M_real_V_address0 <= grp_FFT0_fu_262_data_OUT_M_real_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_OUT3_M_real_V_address0 <= grp_FFT0_fu_262_data_IN_M_real_V_address0;
        else 
            data_OUT3_M_real_V_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT3_M_real_V_ce0_assign_proc : process(grp_FFT0_fu_262_data_IN_M_real_V_ce0, grp_FFT0_fu_262_data_OUT_M_real_V_ce0, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_OUT3_M_real_V_ce0 <= grp_FFT0_fu_262_data_OUT_M_real_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_OUT3_M_real_V_ce0 <= grp_FFT0_fu_262_data_IN_M_real_V_ce0;
        else 
            data_OUT3_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT3_M_real_V_we0_assign_proc : process(grp_FFT0_fu_262_data_OUT_M_real_V_we0, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_OUT3_M_real_V_we0 <= grp_FFT0_fu_262_data_OUT_M_real_V_we0;
        else 
            data_OUT3_M_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT4_M_imag_V_address0_assign_proc : process(grp_FFT0_fu_262_data_IN_M_imag_V_address0, grp_FFT0_fu_262_data_OUT_M_imag_V_address0, ap_CS_fsm_state15, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_OUT4_M_imag_V_address0 <= grp_FFT0_fu_262_data_OUT_M_imag_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            data_OUT4_M_imag_V_address0 <= grp_FFT0_fu_262_data_IN_M_imag_V_address0;
        else 
            data_OUT4_M_imag_V_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT4_M_imag_V_ce0_assign_proc : process(grp_FFT0_fu_262_data_IN_M_imag_V_ce0, grp_FFT0_fu_262_data_OUT_M_imag_V_ce0, ap_CS_fsm_state15, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_OUT4_M_imag_V_ce0 <= grp_FFT0_fu_262_data_OUT_M_imag_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            data_OUT4_M_imag_V_ce0 <= grp_FFT0_fu_262_data_IN_M_imag_V_ce0;
        else 
            data_OUT4_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT4_M_imag_V_we0_assign_proc : process(grp_FFT0_fu_262_data_OUT_M_imag_V_we0, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_OUT4_M_imag_V_we0 <= grp_FFT0_fu_262_data_OUT_M_imag_V_we0;
        else 
            data_OUT4_M_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT4_M_real_V_address0_assign_proc : process(grp_FFT0_fu_262_data_IN_M_real_V_address0, grp_FFT0_fu_262_data_OUT_M_real_V_address0, ap_CS_fsm_state15, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_OUT4_M_real_V_address0 <= grp_FFT0_fu_262_data_OUT_M_real_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            data_OUT4_M_real_V_address0 <= grp_FFT0_fu_262_data_IN_M_real_V_address0;
        else 
            data_OUT4_M_real_V_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT4_M_real_V_ce0_assign_proc : process(grp_FFT0_fu_262_data_IN_M_real_V_ce0, grp_FFT0_fu_262_data_OUT_M_real_V_ce0, ap_CS_fsm_state15, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_OUT4_M_real_V_ce0 <= grp_FFT0_fu_262_data_OUT_M_real_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            data_OUT4_M_real_V_ce0 <= grp_FFT0_fu_262_data_IN_M_real_V_ce0;
        else 
            data_OUT4_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT4_M_real_V_we0_assign_proc : process(grp_FFT0_fu_262_data_OUT_M_real_V_we0, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_OUT4_M_real_V_we0 <= grp_FFT0_fu_262_data_OUT_M_real_V_we0;
        else 
            data_OUT4_M_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    data_OUT_1_ack_in <= data_OUT_1_state(1);
    data_OUT_1_ack_out <= data_OUT_TREADY;

    data_OUT_1_data_out_assign_proc : process(data_OUT_1_payload_A, data_OUT_1_payload_B, data_OUT_1_sel)
    begin
        if ((data_OUT_1_sel = ap_const_logic_1)) then 
            data_OUT_1_data_out <= data_OUT_1_payload_B;
        else 
            data_OUT_1_data_out <= data_OUT_1_payload_A;
        end if; 
    end process;

    data_OUT_1_load_A <= (not(data_OUT_1_sel_wr) and data_OUT_1_state_cmp_full);
    data_OUT_1_load_B <= (data_OUT_1_state_cmp_full and data_OUT_1_sel_wr);
    data_OUT_1_sel <= data_OUT_1_sel_rd;
    data_OUT_1_state_cmp_full <= '0' when (data_OUT_1_state = ap_const_lv2_1) else '1';

    data_OUT_1_vld_in_assign_proc : process(data_OUT_1_ack_in, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (data_OUT_1_ack_in = ap_const_logic_1))) then 
            data_OUT_1_vld_in <= ap_const_logic_1;
        else 
            data_OUT_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    data_OUT_1_vld_out <= data_OUT_1_state(0);
    data_OUT_M_imag_V_a_fu_393_p3 <= (xout_M_imag_V_q0 & xout_M_real_V_q0);
    data_OUT_TDATA <= data_OUT_1_data_out;

    data_OUT_TDATA_blk_n_assign_proc : process(data_OUT_1_state, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            data_OUT_TDATA_blk_n <= data_OUT_1_state(1);
        else 
            data_OUT_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_OUT_TVALID <= data_OUT_1_state(0);
    exitcond1_fu_318_p2 <= "1" when (i_reg_228 = ap_const_lv6_20) else "0";
    exitcond_fu_375_p2 <= "1" when (i1_reg_251 = ap_const_lv6_20) else "0";
    exitcond_i_fu_352_p2 <= "1" when (i_i_reg_240 = ap_const_lv6_20) else "0";

    grp_FFT0_fu_262_FFT_stage_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_FFT0_fu_262_FFT_stage <= ap_const_lv6_10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_FFT0_fu_262_FFT_stage <= ap_const_lv6_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_FFT0_fu_262_FFT_stage <= ap_const_lv6_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_FFT0_fu_262_FFT_stage <= ap_const_lv6_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_FFT0_fu_262_FFT_stage <= ap_const_lv6_1;
        else 
            grp_FFT0_fu_262_FFT_stage <= "XXXXXX";
        end if; 
    end process;

    grp_FFT0_fu_262_ap_start <= grp_FFT0_fu_262_ap_start_reg;

    grp_FFT0_fu_262_data_IN_M_imag_V_q0_assign_proc : process(data_OUT0_M_imag_V_q0, data_OUT1_M_imag_V_q0, data_OUT2_M_imag_V_q0, data_OUT3_M_imag_V_q0, data_OUT4_M_imag_V_q0, ap_CS_fsm_state15, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_FFT0_fu_262_data_IN_M_imag_V_q0 <= data_OUT4_M_imag_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_FFT0_fu_262_data_IN_M_imag_V_q0 <= data_OUT3_M_imag_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_FFT0_fu_262_data_IN_M_imag_V_q0 <= data_OUT2_M_imag_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_FFT0_fu_262_data_IN_M_imag_V_q0 <= data_OUT1_M_imag_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_FFT0_fu_262_data_IN_M_imag_V_q0 <= data_OUT0_M_imag_V_q0;
        else 
            grp_FFT0_fu_262_data_IN_M_imag_V_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_FFT0_fu_262_data_IN_M_real_V_q0_assign_proc : process(data_OUT0_M_real_V_q0, data_OUT1_M_real_V_q0, data_OUT2_M_real_V_q0, data_OUT3_M_real_V_q0, data_OUT4_M_real_V_q0, ap_CS_fsm_state15, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_FFT0_fu_262_data_IN_M_real_V_q0 <= data_OUT4_M_real_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_FFT0_fu_262_data_IN_M_real_V_q0 <= data_OUT3_M_real_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_FFT0_fu_262_data_IN_M_real_V_q0 <= data_OUT2_M_real_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_FFT0_fu_262_data_IN_M_real_V_q0 <= data_OUT1_M_real_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_FFT0_fu_262_data_IN_M_real_V_q0 <= data_OUT0_M_real_V_q0;
        else 
            grp_FFT0_fu_262_data_IN_M_real_V_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_FFT0_fu_262_index_shift_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_FFT0_fu_262_index_shift <= ap_const_lv4_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_FFT0_fu_262_index_shift <= ap_const_lv4_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_FFT0_fu_262_index_shift <= ap_const_lv4_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_FFT0_fu_262_index_shift <= ap_const_lv4_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_FFT0_fu_262_index_shift <= ap_const_lv4_4;
        else 
            grp_FFT0_fu_262_index_shift <= "XXXX";
        end if; 
    end process;


    grp_FFT0_fu_262_pass_check_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_FFT0_fu_262_pass_check <= ap_const_lv6_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_FFT0_fu_262_pass_check <= ap_const_lv6_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_FFT0_fu_262_pass_check <= ap_const_lv6_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_FFT0_fu_262_pass_check <= ap_const_lv6_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_FFT0_fu_262_pass_check <= ap_const_lv6_10;
        else 
            grp_FFT0_fu_262_pass_check <= "XXXXXX";
        end if; 
    end process;


    grp_FFT0_fu_262_pass_shift_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_FFT0_fu_262_pass_shift <= ap_const_lv4_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_FFT0_fu_262_pass_shift <= ap_const_lv4_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_FFT0_fu_262_pass_shift <= ap_const_lv4_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_FFT0_fu_262_pass_shift <= ap_const_lv4_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_FFT0_fu_262_pass_shift <= ap_const_lv4_1;
        else 
            grp_FFT0_fu_262_pass_shift <= "XXXX";
        end if; 
    end process;

    i_2_fu_324_p2 <= std_logic_vector(unsigned(i_reg_228) + unsigned(ap_const_lv6_1));
    i_3_fu_358_p2 <= std_logic_vector(unsigned(i_i_reg_240) + unsigned(ap_const_lv6_1));
    i_4_fu_381_p2 <= std_logic_vector(unsigned(i1_reg_251) + unsigned(ap_const_lv6_1));
    rev_32_address0 <= tmp_i_fu_364_p1(5 - 1 downto 0);

    rev_32_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rev_32_ce0 <= ap_const_logic_1;
        else 
            rev_32_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_8_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_251),64));
    tmp_i_13_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rev_32_q0),64));
    tmp_i_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_240),64));
    tmp_s_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_228),64));

    xin_M_imag_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, tmp_s_fu_330_p1, tmp_i_13_fu_369_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            xin_M_imag_V_address0 <= tmp_i_13_fu_369_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            xin_M_imag_V_address0 <= tmp_s_fu_330_p1(5 - 1 downto 0);
        else 
            xin_M_imag_V_address0 <= "XXXXX";
        end if; 
    end process;


    xin_M_imag_V_ce0_assign_proc : process(data_IN_0_vld_out, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((data_IN_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            xin_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            xin_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xin_M_imag_V_d0 <= data_IN_0_data_out(31 downto 16);

    xin_M_imag_V_we0_assign_proc : process(data_IN_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((data_IN_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            xin_M_imag_V_we0 <= ap_const_logic_1;
        else 
            xin_M_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    xin_M_real_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, tmp_s_fu_330_p1, tmp_i_13_fu_369_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            xin_M_real_V_address0 <= tmp_i_13_fu_369_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            xin_M_real_V_address0 <= tmp_s_fu_330_p1(5 - 1 downto 0);
        else 
            xin_M_real_V_address0 <= "XXXXX";
        end if; 
    end process;


    xin_M_real_V_ce0_assign_proc : process(data_IN_0_vld_out, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((data_IN_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            xin_M_real_V_ce0 <= ap_const_logic_1;
        else 
            xin_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xin_M_real_V_d0 <= data_IN_0_data_out(16 - 1 downto 0);

    xin_M_real_V_we0_assign_proc : process(data_IN_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((data_IN_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            xin_M_real_V_we0 <= ap_const_logic_1;
        else 
            xin_M_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    xout_M_imag_V_address0_assign_proc : process(ap_CS_fsm_state16, grp_FFT0_fu_262_data_OUT_M_imag_V_address0, ap_CS_fsm_state15, tmp_8_fu_387_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            xout_M_imag_V_address0 <= tmp_8_fu_387_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            xout_M_imag_V_address0 <= grp_FFT0_fu_262_data_OUT_M_imag_V_address0;
        else 
            xout_M_imag_V_address0 <= "XXXXX";
        end if; 
    end process;


    xout_M_imag_V_ce0_assign_proc : process(data_OUT_1_ack_in, ap_CS_fsm_state16, grp_FFT0_fu_262_data_OUT_M_imag_V_ce0, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (data_OUT_1_ack_in = ap_const_logic_1))) then 
            xout_M_imag_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            xout_M_imag_V_ce0 <= grp_FFT0_fu_262_data_OUT_M_imag_V_ce0;
        else 
            xout_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xout_M_imag_V_we0_assign_proc : process(grp_FFT0_fu_262_data_OUT_M_imag_V_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            xout_M_imag_V_we0 <= grp_FFT0_fu_262_data_OUT_M_imag_V_we0;
        else 
            xout_M_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    xout_M_real_V_address0_assign_proc : process(ap_CS_fsm_state16, grp_FFT0_fu_262_data_OUT_M_real_V_address0, ap_CS_fsm_state15, tmp_8_fu_387_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            xout_M_real_V_address0 <= tmp_8_fu_387_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            xout_M_real_V_address0 <= grp_FFT0_fu_262_data_OUT_M_real_V_address0;
        else 
            xout_M_real_V_address0 <= "XXXXX";
        end if; 
    end process;


    xout_M_real_V_ce0_assign_proc : process(data_OUT_1_ack_in, ap_CS_fsm_state16, grp_FFT0_fu_262_data_OUT_M_real_V_ce0, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (data_OUT_1_ack_in = ap_const_logic_1))) then 
            xout_M_real_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            xout_M_real_V_ce0 <= grp_FFT0_fu_262_data_OUT_M_real_V_ce0;
        else 
            xout_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xout_M_real_V_we0_assign_proc : process(grp_FFT0_fu_262_data_OUT_M_real_V_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            xout_M_real_V_we0 <= grp_FFT0_fu_262_data_OUT_M_real_V_we0;
        else 
            xout_M_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
