-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FFT0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    FFT_stage : IN STD_LOGIC_VECTOR (5 downto 0);
    pass_check : IN STD_LOGIC_VECTOR (5 downto 0);
    index_shift : IN STD_LOGIC_VECTOR (3 downto 0);
    pass_shift : IN STD_LOGIC_VECTOR (3 downto 0);
    data_IN_M_real_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_IN_M_real_ce0 : OUT STD_LOGIC;
    data_IN_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_IN_M_imag_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_IN_M_imag_ce0 : OUT STD_LOGIC;
    data_IN_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_OUT_M_real_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_OUT_M_real_ce0 : OUT STD_LOGIC;
    data_OUT_M_real_we0 : OUT STD_LOGIC;
    data_OUT_M_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_OUT_M_imag_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_OUT_M_imag_ce0 : OUT STD_LOGIC;
    data_OUT_M_imag_we0 : OUT STD_LOGIC;
    data_OUT_M_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of FFT0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal W_M_real_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal W_M_real_ce0 : STD_LOGIC;
    signal W_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_M_imag_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal W_M_imag_ce0 : STD_LOGIC;
    signal W_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_245 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal reg_253 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_213_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_217_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal pass_shift_cast_fu_275_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pass_shift_cast_reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_shift_cast_fu_279_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_shift_cast_reg_414 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_stage_cast1_fu_283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_stage_cast1_reg_419 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_cast_fu_297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_cast_reg_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_cast_2_fu_311_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_cast_2_reg_429 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_321_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_437 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal index_fu_327_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_reg_442 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Ulimit_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ulimit_reg_447 : STD_LOGIC_VECTOR (31 downto 0);
    signal butterfly_span_2_fu_373_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal butterfly_span_2_reg_453 : STD_LOGIC_VECTOR (31 downto 0);
    signal butterfly_pass_2_fu_381_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal butterfly_pass_2_reg_458 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_3_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_473 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_r_M_real_reg_489 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_imag_reg_495 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_reg_501 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_i_reg_506 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_237_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_i_i_reg_511 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_i_i_reg_516 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_521 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_221_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal complex_M_real_writ_1_reg_537 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal complex_M_imag_writ_1_reg_542 : STD_LOGIC_VECTOR (31 downto 0);
    signal butterfly_span_reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal butterfly_pass_reg_191 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_202 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_213_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_217_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_217_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_7_fu_287_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_291_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_301_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_305_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal butterfly_pass_3_fu_359_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal butterfly_span_1_fu_348_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal butterfly_pass_1_fu_365_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Llimit_fu_389_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_217_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);

    component FFT_fsub_32ns_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_faddfsub_32nscud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_fadd_32ns_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_fmul_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT0_W_M_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT0_W_M_imag IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    W_M_real_U : component FFT0_W_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_M_real_address0,
        ce0 => W_M_real_ce0,
        q0 => W_M_real_q0);

    W_M_imag_U : component FFT0_W_M_imag
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_M_imag_address0,
        ce0 => W_M_imag_ce0,
        q0 => W_M_imag_q0);

    FFT_fsub_32ns_32nbkb_U1 : component FFT_fsub_32ns_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_213_p0,
        din1 => grp_fu_213_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_213_p2);

    FFT_faddfsub_32nscud_U2 : component FFT_faddfsub_32nscud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_217_p0,
        din1 => grp_fu_217_p1,
        opcode => grp_fu_217_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_217_p2);

    FFT_fadd_32ns_32ndEe_U3 : component FFT_fadd_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_245,
        din1 => reg_261,
        ce => ap_const_logic_1,
        dout => grp_fu_221_p2);

    FFT_fadd_32ns_32ndEe_U4 : component FFT_fadd_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_253,
        din1 => reg_268,
        ce => ap_const_logic_1,
        dout => grp_fu_225_p2);

    FFT_fmul_32ns_32neOg_U5 : component FFT_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_reg_489,
        din1 => reg_245,
        ce => ap_const_logic_1,
        dout => grp_fu_229_p2);

    FFT_fmul_32ns_32neOg_U6 : component FFT_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_reg_495,
        din1 => reg_253,
        ce => ap_const_logic_1,
        dout => grp_fu_233_p2);

    FFT_fmul_32ns_32neOg_U7 : component FFT_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_reg_495,
        din1 => reg_245,
        ce => ap_const_logic_1,
        dout => grp_fu_237_p2);

    FFT_fmul_32ns_32neOg_U8 : component FFT_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_reg_489,
        din1 => reg_253,
        ce => ap_const_logic_1,
        dout => grp_fu_241_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    butterfly_pass_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                butterfly_pass_reg_191 <= butterfly_pass_2_reg_458;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                butterfly_pass_reg_191 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    butterfly_span_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                butterfly_span_reg_180 <= butterfly_span_2_reg_453;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                butterfly_span_reg_180 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i_reg_202 <= i_1_reg_437;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_202 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    FFT_stage_cast1_reg_419(5 downto 0) <= FFT_stage_cast1_fu_283_p1(5 downto 0);
                    index_shift_cast_reg_414(3 downto 0) <= index_shift_cast_fu_279_p1(3 downto 0);
                    pass_shift_cast_reg_409(3 downto 0) <= pass_shift_cast_fu_275_p1(3 downto 0);
                    tmp_cast_2_reg_429(4 downto 0) <= tmp_cast_2_fu_311_p1(4 downto 0);
                    tmp_cast_reg_424(4 downto 0) <= tmp_cast_fu_297_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_315_p2 = ap_const_lv1_0))) then
                Ulimit_reg_447 <= Ulimit_fu_337_p2;
                butterfly_pass_2_reg_458 <= butterfly_pass_2_fu_381_p3;
                butterfly_span_2_reg_453 <= butterfly_span_2_fu_373_p3;
                index_reg_442 <= index_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                complex_M_imag_writ_1_reg_542 <= grp_fu_225_p2;
                complex_M_real_writ_1_reg_537 <= grp_fu_221_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_437 <= i_1_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                p_r_M_imag_reg_495 <= W_M_imag_q0;
                p_r_M_real_reg_489 <= W_M_real_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_245 <= data_IN_M_real_q0;
                reg_253 <= data_IN_M_imag_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state18))) then
                reg_261 <= grp_fu_213_p2;
                reg_268 <= grp_fu_217_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_3_i_i_reg_506 <= grp_fu_233_p2;
                tmp_5_i_i_reg_511 <= grp_fu_237_p2;
                tmp_6_i_i_reg_516 <= grp_fu_241_p2;
                tmp_i_i_reg_501 <= grp_fu_229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_3_reg_473 <= tmp_3_fu_398_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_4_reg_521 <= tmp_4_fu_404_p1;
            end if;
        end if;
    end process;
    pass_shift_cast_reg_409(31 downto 4) <= "0000000000000000000000000000";
    index_shift_cast_reg_414(31 downto 4) <= "0000000000000000000000000000";
    FFT_stage_cast1_reg_419(31 downto 6) <= "00000000000000000000000000";
    tmp_cast_reg_424(31 downto 5) <= "000000000000000000000000000";
    tmp_cast_2_reg_429(31 downto 5) <= "000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_315_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_315_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    FFT_stage_cast1_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(FFT_stage),32));
    Llimit_fu_389_p2 <= std_logic_vector(signed(Ulimit_reg_447) + signed(FFT_stage_cast1_reg_419));
    Ulimit_fu_337_p2 <= std_logic_vector(unsigned(tmp_1_fu_332_p2) + unsigned(butterfly_span_reg_180));
    W_M_imag_address0 <= tmp_2_fu_393_p1(4 - 1 downto 0);

    W_M_imag_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            W_M_imag_ce0 <= ap_const_logic_1;
        else 
            W_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_M_real_address0 <= tmp_2_fu_393_p1(4 - 1 downto 0);

    W_M_real_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            W_M_real_ce0 <= ap_const_logic_1;
        else 
            W_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_315_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_315_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_315_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_315_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    butterfly_pass_1_fu_365_p3 <= 
        butterfly_pass_3_fu_359_p2 when (tmp_6_fu_354_p2(0) = '1') else 
        ap_const_lv32_0;
    butterfly_pass_2_fu_381_p3 <= 
        butterfly_pass_reg_191 when (tmp_5_fu_343_p2(0) = '1') else 
        butterfly_pass_1_fu_365_p3;
    butterfly_pass_3_fu_359_p2 <= std_logic_vector(unsigned(butterfly_pass_reg_191) + unsigned(ap_const_lv32_1));
    butterfly_span_1_fu_348_p2 <= std_logic_vector(unsigned(butterfly_span_reg_180) + unsigned(ap_const_lv32_1));
    butterfly_span_2_fu_373_p3 <= 
        butterfly_span_1_fu_348_p2 when (tmp_5_fu_343_p2(0) = '1') else 
        ap_const_lv32_0;

    data_IN_M_imag_address0_assign_proc : process(ap_CS_fsm_state3, tmp_3_fu_398_p1, tmp_4_fu_404_p1, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            data_IN_M_imag_address0 <= tmp_4_fu_404_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_IN_M_imag_address0 <= tmp_3_fu_398_p1(5 - 1 downto 0);
        else 
            data_IN_M_imag_address0 <= "XXXXX";
        end if; 
    end process;


    data_IN_M_imag_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data_IN_M_imag_ce0 <= ap_const_logic_1;
        else 
            data_IN_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_IN_M_real_address0_assign_proc : process(ap_CS_fsm_state3, tmp_3_fu_398_p1, tmp_4_fu_404_p1, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            data_IN_M_real_address0 <= tmp_4_fu_404_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_IN_M_real_address0 <= tmp_3_fu_398_p1(5 - 1 downto 0);
        else 
            data_IN_M_real_address0 <= "XXXXX";
        end if; 
    end process;


    data_IN_M_real_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data_IN_M_real_ce0 <= ap_const_logic_1;
        else 
            data_IN_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT_M_imag_address0_assign_proc : process(tmp_3_reg_473, tmp_4_reg_521, ap_CS_fsm_state20, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            data_OUT_M_imag_address0 <= tmp_4_reg_521(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            data_OUT_M_imag_address0 <= tmp_3_reg_473(5 - 1 downto 0);
        else 
            data_OUT_M_imag_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT_M_imag_ce0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            data_OUT_M_imag_ce0 <= ap_const_logic_1;
        else 
            data_OUT_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT_M_imag_d0_assign_proc : process(reg_268, complex_M_imag_writ_1_reg_542, ap_CS_fsm_state20, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            data_OUT_M_imag_d0 <= complex_M_imag_writ_1_reg_542;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            data_OUT_M_imag_d0 <= reg_268;
        else 
            data_OUT_M_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_OUT_M_imag_we0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            data_OUT_M_imag_we0 <= ap_const_logic_1;
        else 
            data_OUT_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT_M_real_address0_assign_proc : process(tmp_3_reg_473, tmp_4_reg_521, ap_CS_fsm_state20, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            data_OUT_M_real_address0 <= tmp_4_reg_521(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            data_OUT_M_real_address0 <= tmp_3_reg_473(5 - 1 downto 0);
        else 
            data_OUT_M_real_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT_M_real_ce0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            data_OUT_M_real_ce0 <= ap_const_logic_1;
        else 
            data_OUT_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT_M_real_d0_assign_proc : process(reg_261, complex_M_real_writ_1_reg_537, ap_CS_fsm_state20, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            data_OUT_M_real_d0 <= complex_M_real_writ_1_reg_537;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            data_OUT_M_real_d0 <= reg_261;
        else 
            data_OUT_M_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_OUT_M_real_we0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            data_OUT_M_real_we0 <= ap_const_logic_1;
        else 
            data_OUT_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_315_p2 <= "1" when (i_reg_202 = ap_const_lv5_10) else "0";

    grp_fu_213_p0_assign_proc : process(reg_245, tmp_i_i_reg_501, ap_CS_fsm_state9, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_213_p0 <= reg_245;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_213_p0 <= tmp_i_i_reg_501;
        else 
            grp_fu_213_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_213_p1_assign_proc : process(reg_261, tmp_3_i_i_reg_506, ap_CS_fsm_state9, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_213_p1 <= reg_261;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_213_p1 <= tmp_3_i_i_reg_506;
        else 
            grp_fu_213_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_217_opcode_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_217_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_217_opcode <= ap_const_lv2_0;
        else 
            grp_fu_217_opcode <= "XX";
        end if; 
    end process;


    grp_fu_217_p0_assign_proc : process(reg_253, tmp_5_i_i_reg_511, ap_CS_fsm_state9, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_217_p0 <= reg_253;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_217_p0 <= tmp_5_i_i_reg_511;
        else 
            grp_fu_217_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_217_p1_assign_proc : process(reg_268, tmp_6_i_i_reg_516, ap_CS_fsm_state9, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_217_p1 <= reg_268;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_217_p1 <= tmp_6_i_i_reg_516;
        else 
            grp_fu_217_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_321_p2 <= std_logic_vector(unsigned(i_reg_202) + unsigned(ap_const_lv5_1));
    index_fu_327_p2 <= std_logic_vector(shift_left(unsigned(butterfly_span_reg_180),to_integer(unsigned('0' & index_shift_cast_reg_414(31-1 downto 0)))));
    index_shift_cast_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_shift),32));
    pass_shift_cast_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pass_shift),32));
    tmp_1_fu_332_p2 <= std_logic_vector(shift_left(unsigned(butterfly_pass_reg_191),to_integer(unsigned('0' & pass_shift_cast_reg_409(31-1 downto 0)))));
        tmp_2_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(index_reg_442),64));

        tmp_3_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Llimit_fu_389_p2),64));

        tmp_4_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ulimit_reg_447),64));

    tmp_5_fu_343_p2 <= "1" when (signed(butterfly_span_reg_180) < signed(tmp_cast_reg_424)) else "0";
    tmp_6_fu_354_p2 <= "1" when (signed(butterfly_pass_reg_191) < signed(tmp_cast_2_reg_429)) else "0";
    tmp_7_fu_287_p1 <= FFT_stage(5 - 1 downto 0);
    tmp_8_fu_301_p1 <= pass_check(5 - 1 downto 0);
    tmp_cast_2_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_305_p2),32));
    tmp_cast_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_291_p2),32));
    tmp_fu_291_p2 <= std_logic_vector(signed(ap_const_lv5_1F) + signed(tmp_7_fu_287_p1));
    tmp_s_fu_305_p2 <= std_logic_vector(signed(ap_const_lv5_1F) + signed(tmp_8_fu_301_p1));
end behav;
