-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FFT is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 10;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of FFT is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "FFT,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=1761,HLS_SYN_TPT=none,HLS_SYN_MEM=22,HLS_SYN_DSP=20,HLS_SYN_FF=2647,HLS_SYN_LUT=4894,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal data_IN_M_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_IN_M_real_ce0 : STD_LOGIC;
    signal data_IN_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_IN_M_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_IN_M_imag_ce0 : STD_LOGIC;
    signal data_IN_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_OUT_M_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT_M_real_ce0 : STD_LOGIC;
    signal data_OUT_M_real_we0 : STD_LOGIC;
    signal data_OUT_M_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT_M_imag_ce0 : STD_LOGIC;
    signal data_OUT_M_imag_we0 : STD_LOGIC;
    signal xin_M_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal xin_M_real_ce0 : STD_LOGIC;
    signal xin_M_real_we0 : STD_LOGIC;
    signal xin_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal xin_M_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal xin_M_imag_ce0 : STD_LOGIC;
    signal xin_M_imag_we0 : STD_LOGIC;
    signal xin_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rev_32_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rev_32_ce0 : STD_LOGIC;
    signal rev_32_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT0_M_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT0_M_real_ce0 : STD_LOGIC;
    signal data_OUT0_M_real_we0 : STD_LOGIC;
    signal data_OUT0_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_OUT0_M_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT0_M_imag_ce0 : STD_LOGIC;
    signal data_OUT0_M_imag_we0 : STD_LOGIC;
    signal data_OUT0_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_OUT1_M_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT1_M_real_ce0 : STD_LOGIC;
    signal data_OUT1_M_real_we0 : STD_LOGIC;
    signal data_OUT1_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_OUT1_M_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT1_M_imag_ce0 : STD_LOGIC;
    signal data_OUT1_M_imag_we0 : STD_LOGIC;
    signal data_OUT1_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_OUT2_M_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT2_M_real_ce0 : STD_LOGIC;
    signal data_OUT2_M_real_we0 : STD_LOGIC;
    signal data_OUT2_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_OUT2_M_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT2_M_imag_ce0 : STD_LOGIC;
    signal data_OUT2_M_imag_we0 : STD_LOGIC;
    signal data_OUT2_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_OUT3_M_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT3_M_real_ce0 : STD_LOGIC;
    signal data_OUT3_M_real_we0 : STD_LOGIC;
    signal data_OUT3_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_OUT3_M_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT3_M_imag_ce0 : STD_LOGIC;
    signal data_OUT3_M_imag_we0 : STD_LOGIC;
    signal data_OUT3_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_OUT4_M_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT4_M_real_ce0 : STD_LOGIC;
    signal data_OUT4_M_real_we0 : STD_LOGIC;
    signal data_OUT4_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_OUT4_M_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT4_M_imag_ce0 : STD_LOGIC;
    signal data_OUT4_M_imag_we0 : STD_LOGIC;
    signal data_OUT4_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal xout_M_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal xout_M_real_ce0 : STD_LOGIC;
    signal xout_M_real_we0 : STD_LOGIC;
    signal xout_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal xout_M_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal xout_M_imag_ce0 : STD_LOGIC;
    signal xout_M_imag_we0 : STD_LOGIC;
    signal xout_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_368_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_reg_424 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_s_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_429 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_386_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_3_reg_448 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_i_fu_392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_reg_453 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_4_fu_409_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_4_reg_477 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_1_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_482 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_FFT0_fu_306_ap_start : STD_LOGIC;
    signal grp_FFT0_fu_306_ap_done : STD_LOGIC;
    signal grp_FFT0_fu_306_ap_idle : STD_LOGIC;
    signal grp_FFT0_fu_306_ap_ready : STD_LOGIC;
    signal grp_FFT0_fu_306_FFT_stage : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_FFT0_fu_306_pass_check : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_FFT0_fu_306_index_shift : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_FFT0_fu_306_pass_shift : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_FFT0_fu_306_data_IN_M_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_FFT0_fu_306_data_IN_M_real_ce0 : STD_LOGIC;
    signal grp_FFT0_fu_306_data_IN_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_FFT0_fu_306_data_IN_M_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_FFT0_fu_306_data_IN_M_imag_ce0 : STD_LOGIC;
    signal grp_FFT0_fu_306_data_IN_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_FFT0_fu_306_data_OUT_M_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_FFT0_fu_306_data_OUT_M_real_ce0 : STD_LOGIC;
    signal grp_FFT0_fu_306_data_OUT_M_real_we0 : STD_LOGIC;
    signal grp_FFT0_fu_306_data_OUT_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_FFT0_fu_306_data_OUT_M_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_FFT0_fu_306_data_OUT_M_imag_ce0 : STD_LOGIC;
    signal grp_FFT0_fu_306_data_OUT_M_imag_we0 : STD_LOGIC;
    signal grp_FFT0_fu_306_data_OUT_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_273 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_i_reg_284 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i1_reg_295 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_FFT0_fu_306_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_8_i_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);

    component FFT0 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        FFT_stage : IN STD_LOGIC_VECTOR (5 downto 0);
        pass_check : IN STD_LOGIC_VECTOR (5 downto 0);
        index_shift : IN STD_LOGIC_VECTOR (3 downto 0);
        pass_shift : IN STD_LOGIC_VECTOR (3 downto 0);
        data_IN_M_real_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_IN_M_real_ce0 : OUT STD_LOGIC;
        data_IN_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_IN_M_imag_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_IN_M_imag_ce0 : OUT STD_LOGIC;
        data_IN_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_OUT_M_real_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_OUT_M_real_ce0 : OUT STD_LOGIC;
        data_OUT_M_real_we0 : OUT STD_LOGIC;
        data_OUT_M_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_OUT_M_imag_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_OUT_M_imag_ce0 : OUT STD_LOGIC;
        data_OUT_M_imag_we0 : OUT STD_LOGIC;
        data_OUT_M_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_xin_M_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_rev_32 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component FFT_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        data_IN_M_real_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        data_IN_M_real_ce0 : IN STD_LOGIC;
        data_IN_M_real_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_IN_M_imag_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        data_IN_M_imag_ce0 : IN STD_LOGIC;
        data_IN_M_imag_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_OUT_M_real_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        data_OUT_M_real_ce0 : IN STD_LOGIC;
        data_OUT_M_real_we0 : IN STD_LOGIC;
        data_OUT_M_real_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_OUT_M_imag_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        data_OUT_M_imag_ce0 : IN STD_LOGIC;
        data_OUT_M_imag_we0 : IN STD_LOGIC;
        data_OUT_M_imag_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    xin_M_real_U : component FFT_xin_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xin_M_real_address0,
        ce0 => xin_M_real_ce0,
        we0 => xin_M_real_we0,
        d0 => data_IN_M_real_q0,
        q0 => xin_M_real_q0);

    xin_M_imag_U : component FFT_xin_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xin_M_imag_address0,
        ce0 => xin_M_imag_ce0,
        we0 => xin_M_imag_we0,
        d0 => data_IN_M_imag_q0,
        q0 => xin_M_imag_q0);

    rev_32_U : component FFT_rev_32
    generic map (
        DataWidth => 5,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => rev_32_address0,
        ce0 => rev_32_ce0,
        q0 => rev_32_q0);

    data_OUT0_M_real_U : component FFT_xin_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT0_M_real_address0,
        ce0 => data_OUT0_M_real_ce0,
        we0 => data_OUT0_M_real_we0,
        d0 => xin_M_real_q0,
        q0 => data_OUT0_M_real_q0);

    data_OUT0_M_imag_U : component FFT_xin_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT0_M_imag_address0,
        ce0 => data_OUT0_M_imag_ce0,
        we0 => data_OUT0_M_imag_we0,
        d0 => xin_M_imag_q0,
        q0 => data_OUT0_M_imag_q0);

    data_OUT1_M_real_U : component FFT_xin_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT1_M_real_address0,
        ce0 => data_OUT1_M_real_ce0,
        we0 => data_OUT1_M_real_we0,
        d0 => grp_FFT0_fu_306_data_OUT_M_real_d0,
        q0 => data_OUT1_M_real_q0);

    data_OUT1_M_imag_U : component FFT_xin_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT1_M_imag_address0,
        ce0 => data_OUT1_M_imag_ce0,
        we0 => data_OUT1_M_imag_we0,
        d0 => grp_FFT0_fu_306_data_OUT_M_imag_d0,
        q0 => data_OUT1_M_imag_q0);

    data_OUT2_M_real_U : component FFT_xin_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT2_M_real_address0,
        ce0 => data_OUT2_M_real_ce0,
        we0 => data_OUT2_M_real_we0,
        d0 => grp_FFT0_fu_306_data_OUT_M_real_d0,
        q0 => data_OUT2_M_real_q0);

    data_OUT2_M_imag_U : component FFT_xin_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT2_M_imag_address0,
        ce0 => data_OUT2_M_imag_ce0,
        we0 => data_OUT2_M_imag_we0,
        d0 => grp_FFT0_fu_306_data_OUT_M_imag_d0,
        q0 => data_OUT2_M_imag_q0);

    data_OUT3_M_real_U : component FFT_xin_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT3_M_real_address0,
        ce0 => data_OUT3_M_real_ce0,
        we0 => data_OUT3_M_real_we0,
        d0 => grp_FFT0_fu_306_data_OUT_M_real_d0,
        q0 => data_OUT3_M_real_q0);

    data_OUT3_M_imag_U : component FFT_xin_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT3_M_imag_address0,
        ce0 => data_OUT3_M_imag_ce0,
        we0 => data_OUT3_M_imag_we0,
        d0 => grp_FFT0_fu_306_data_OUT_M_imag_d0,
        q0 => data_OUT3_M_imag_q0);

    data_OUT4_M_real_U : component FFT_xin_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT4_M_real_address0,
        ce0 => data_OUT4_M_real_ce0,
        we0 => data_OUT4_M_real_we0,
        d0 => grp_FFT0_fu_306_data_OUT_M_real_d0,
        q0 => data_OUT4_M_real_q0);

    data_OUT4_M_imag_U : component FFT_xin_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT4_M_imag_address0,
        ce0 => data_OUT4_M_imag_ce0,
        we0 => data_OUT4_M_imag_we0,
        d0 => grp_FFT0_fu_306_data_OUT_M_imag_d0,
        q0 => data_OUT4_M_imag_q0);

    xout_M_real_U : component FFT_xin_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xout_M_real_address0,
        ce0 => xout_M_real_ce0,
        we0 => xout_M_real_we0,
        d0 => grp_FFT0_fu_306_data_OUT_M_real_d0,
        q0 => xout_M_real_q0);

    xout_M_imag_U : component FFT_xin_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xout_M_imag_address0,
        ce0 => xout_M_imag_ce0,
        we0 => xout_M_imag_we0,
        d0 => grp_FFT0_fu_306_data_OUT_M_imag_d0,
        q0 => xout_M_imag_q0);

    FFT_AXILiteS_s_axi_U : component FFT_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        data_IN_M_real_address0 => data_IN_M_real_address0,
        data_IN_M_real_ce0 => data_IN_M_real_ce0,
        data_IN_M_real_q0 => data_IN_M_real_q0,
        data_IN_M_imag_address0 => data_IN_M_imag_address0,
        data_IN_M_imag_ce0 => data_IN_M_imag_ce0,
        data_IN_M_imag_q0 => data_IN_M_imag_q0,
        data_OUT_M_real_address0 => data_OUT_M_real_address0,
        data_OUT_M_real_ce0 => data_OUT_M_real_ce0,
        data_OUT_M_real_we0 => data_OUT_M_real_we0,
        data_OUT_M_real_d0 => xout_M_real_q0,
        data_OUT_M_imag_address0 => data_OUT_M_imag_address0,
        data_OUT_M_imag_ce0 => data_OUT_M_imag_ce0,
        data_OUT_M_imag_we0 => data_OUT_M_imag_we0,
        data_OUT_M_imag_d0 => xout_M_imag_q0);

    grp_FFT0_fu_306 : component FFT0
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_FFT0_fu_306_ap_start,
        ap_done => grp_FFT0_fu_306_ap_done,
        ap_idle => grp_FFT0_fu_306_ap_idle,
        ap_ready => grp_FFT0_fu_306_ap_ready,
        FFT_stage => grp_FFT0_fu_306_FFT_stage,
        pass_check => grp_FFT0_fu_306_pass_check,
        index_shift => grp_FFT0_fu_306_index_shift,
        pass_shift => grp_FFT0_fu_306_pass_shift,
        data_IN_M_real_address0 => grp_FFT0_fu_306_data_IN_M_real_address0,
        data_IN_M_real_ce0 => grp_FFT0_fu_306_data_IN_M_real_ce0,
        data_IN_M_real_q0 => grp_FFT0_fu_306_data_IN_M_real_q0,
        data_IN_M_imag_address0 => grp_FFT0_fu_306_data_IN_M_imag_address0,
        data_IN_M_imag_ce0 => grp_FFT0_fu_306_data_IN_M_imag_ce0,
        data_IN_M_imag_q0 => grp_FFT0_fu_306_data_IN_M_imag_q0,
        data_OUT_M_real_address0 => grp_FFT0_fu_306_data_OUT_M_real_address0,
        data_OUT_M_real_ce0 => grp_FFT0_fu_306_data_OUT_M_real_ce0,
        data_OUT_M_real_we0 => grp_FFT0_fu_306_data_OUT_M_real_we0,
        data_OUT_M_real_d0 => grp_FFT0_fu_306_data_OUT_M_real_d0,
        data_OUT_M_imag_address0 => grp_FFT0_fu_306_data_OUT_M_imag_address0,
        data_OUT_M_imag_ce0 => grp_FFT0_fu_306_data_OUT_M_imag_ce0,
        data_OUT_M_imag_we0 => grp_FFT0_fu_306_data_OUT_M_imag_we0,
        data_OUT_M_imag_d0 => grp_FFT0_fu_306_data_OUT_M_imag_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_FFT0_fu_306_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_FFT0_fu_306_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((exitcond_i_fu_380_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
                    grp_FFT0_fu_306_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_FFT0_fu_306_ap_ready = ap_const_logic_1)) then 
                    grp_FFT0_fu_306_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i1_reg_295 <= i_4_reg_477;
            elsif (((grp_FFT0_fu_306_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                i1_reg_295 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_i_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_362_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_i_reg_284 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_i_reg_284 <= i_3_reg_448;
            end if; 
        end if;
    end process;

    i_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_273 <= i_2_reg_424;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_273 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_424 <= i_2_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_3_reg_448 <= i_3_fu_386_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                i_4_reg_477 <= i_4_fu_409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_403_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    tmp_1_reg_482(5 downto 0) <= tmp_1_fu_415_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_380_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_i_reg_453(5 downto 0) <= tmp_i_fu_392_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_362_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_s_reg_429(5 downto 0) <= tmp_s_fu_374_p1(5 downto 0);
            end if;
        end if;
    end process;
    tmp_s_reg_429(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_i_reg_453(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_1_reg_482(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_362_p2, ap_CS_fsm_state4, exitcond_i_fu_380_p2, ap_CS_fsm_state16, exitcond_fu_403_p2, grp_FFT0_fu_306_ap_done, ap_CS_fsm_state15, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_362_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((exitcond_i_fu_380_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state7 => 
                if (((grp_FFT0_fu_306_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((grp_FFT0_fu_306_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((grp_FFT0_fu_306_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_FFT0_fu_306_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((grp_FFT0_fu_306_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((exitcond_fu_403_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state16, exitcond_fu_403_p2)
    begin
        if (((exitcond_fu_403_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16, exitcond_fu_403_p2)
    begin
        if (((exitcond_fu_403_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    data_IN_M_imag_address0 <= tmp_s_fu_374_p1(5 - 1 downto 0);

    data_IN_M_imag_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_IN_M_imag_ce0 <= ap_const_logic_1;
        else 
            data_IN_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_IN_M_real_address0 <= tmp_s_fu_374_p1(5 - 1 downto 0);

    data_IN_M_real_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_IN_M_real_ce0 <= ap_const_logic_1;
        else 
            data_IN_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT0_M_imag_address0_assign_proc : process(tmp_i_reg_453, grp_FFT0_fu_306_data_IN_M_imag_address0, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT0_M_imag_address0 <= tmp_i_reg_453(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_OUT0_M_imag_address0 <= grp_FFT0_fu_306_data_IN_M_imag_address0;
        else 
            data_OUT0_M_imag_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT0_M_imag_ce0_assign_proc : process(grp_FFT0_fu_306_data_IN_M_imag_ce0, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT0_M_imag_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_OUT0_M_imag_ce0 <= grp_FFT0_fu_306_data_IN_M_imag_ce0;
        else 
            data_OUT0_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT0_M_imag_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT0_M_imag_we0 <= ap_const_logic_1;
        else 
            data_OUT0_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT0_M_real_address0_assign_proc : process(tmp_i_reg_453, grp_FFT0_fu_306_data_IN_M_real_address0, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT0_M_real_address0 <= tmp_i_reg_453(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_OUT0_M_real_address0 <= grp_FFT0_fu_306_data_IN_M_real_address0;
        else 
            data_OUT0_M_real_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT0_M_real_ce0_assign_proc : process(grp_FFT0_fu_306_data_IN_M_real_ce0, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT0_M_real_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_OUT0_M_real_ce0 <= grp_FFT0_fu_306_data_IN_M_real_ce0;
        else 
            data_OUT0_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT0_M_real_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT0_M_real_we0 <= ap_const_logic_1;
        else 
            data_OUT0_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT1_M_imag_address0_assign_proc : process(grp_FFT0_fu_306_data_IN_M_imag_address0, grp_FFT0_fu_306_data_OUT_M_imag_address0, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_OUT1_M_imag_address0 <= grp_FFT0_fu_306_data_OUT_M_imag_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_OUT1_M_imag_address0 <= grp_FFT0_fu_306_data_IN_M_imag_address0;
        else 
            data_OUT1_M_imag_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT1_M_imag_ce0_assign_proc : process(grp_FFT0_fu_306_data_IN_M_imag_ce0, grp_FFT0_fu_306_data_OUT_M_imag_ce0, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_OUT1_M_imag_ce0 <= grp_FFT0_fu_306_data_OUT_M_imag_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_OUT1_M_imag_ce0 <= grp_FFT0_fu_306_data_IN_M_imag_ce0;
        else 
            data_OUT1_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT1_M_imag_we0_assign_proc : process(grp_FFT0_fu_306_data_OUT_M_imag_we0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_OUT1_M_imag_we0 <= grp_FFT0_fu_306_data_OUT_M_imag_we0;
        else 
            data_OUT1_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT1_M_real_address0_assign_proc : process(grp_FFT0_fu_306_data_IN_M_real_address0, grp_FFT0_fu_306_data_OUT_M_real_address0, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_OUT1_M_real_address0 <= grp_FFT0_fu_306_data_OUT_M_real_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_OUT1_M_real_address0 <= grp_FFT0_fu_306_data_IN_M_real_address0;
        else 
            data_OUT1_M_real_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT1_M_real_ce0_assign_proc : process(grp_FFT0_fu_306_data_IN_M_real_ce0, grp_FFT0_fu_306_data_OUT_M_real_ce0, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_OUT1_M_real_ce0 <= grp_FFT0_fu_306_data_OUT_M_real_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_OUT1_M_real_ce0 <= grp_FFT0_fu_306_data_IN_M_real_ce0;
        else 
            data_OUT1_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT1_M_real_we0_assign_proc : process(grp_FFT0_fu_306_data_OUT_M_real_we0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_OUT1_M_real_we0 <= grp_FFT0_fu_306_data_OUT_M_real_we0;
        else 
            data_OUT1_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT2_M_imag_address0_assign_proc : process(grp_FFT0_fu_306_data_IN_M_imag_address0, grp_FFT0_fu_306_data_OUT_M_imag_address0, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_OUT2_M_imag_address0 <= grp_FFT0_fu_306_data_OUT_M_imag_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_OUT2_M_imag_address0 <= grp_FFT0_fu_306_data_IN_M_imag_address0;
        else 
            data_OUT2_M_imag_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT2_M_imag_ce0_assign_proc : process(grp_FFT0_fu_306_data_IN_M_imag_ce0, grp_FFT0_fu_306_data_OUT_M_imag_ce0, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_OUT2_M_imag_ce0 <= grp_FFT0_fu_306_data_OUT_M_imag_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_OUT2_M_imag_ce0 <= grp_FFT0_fu_306_data_IN_M_imag_ce0;
        else 
            data_OUT2_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT2_M_imag_we0_assign_proc : process(grp_FFT0_fu_306_data_OUT_M_imag_we0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_OUT2_M_imag_we0 <= grp_FFT0_fu_306_data_OUT_M_imag_we0;
        else 
            data_OUT2_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT2_M_real_address0_assign_proc : process(grp_FFT0_fu_306_data_IN_M_real_address0, grp_FFT0_fu_306_data_OUT_M_real_address0, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_OUT2_M_real_address0 <= grp_FFT0_fu_306_data_OUT_M_real_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_OUT2_M_real_address0 <= grp_FFT0_fu_306_data_IN_M_real_address0;
        else 
            data_OUT2_M_real_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT2_M_real_ce0_assign_proc : process(grp_FFT0_fu_306_data_IN_M_real_ce0, grp_FFT0_fu_306_data_OUT_M_real_ce0, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_OUT2_M_real_ce0 <= grp_FFT0_fu_306_data_OUT_M_real_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_OUT2_M_real_ce0 <= grp_FFT0_fu_306_data_IN_M_real_ce0;
        else 
            data_OUT2_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT2_M_real_we0_assign_proc : process(grp_FFT0_fu_306_data_OUT_M_real_we0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_OUT2_M_real_we0 <= grp_FFT0_fu_306_data_OUT_M_real_we0;
        else 
            data_OUT2_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT3_M_imag_address0_assign_proc : process(grp_FFT0_fu_306_data_IN_M_imag_address0, grp_FFT0_fu_306_data_OUT_M_imag_address0, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_OUT3_M_imag_address0 <= grp_FFT0_fu_306_data_OUT_M_imag_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_OUT3_M_imag_address0 <= grp_FFT0_fu_306_data_IN_M_imag_address0;
        else 
            data_OUT3_M_imag_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT3_M_imag_ce0_assign_proc : process(grp_FFT0_fu_306_data_IN_M_imag_ce0, grp_FFT0_fu_306_data_OUT_M_imag_ce0, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_OUT3_M_imag_ce0 <= grp_FFT0_fu_306_data_OUT_M_imag_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_OUT3_M_imag_ce0 <= grp_FFT0_fu_306_data_IN_M_imag_ce0;
        else 
            data_OUT3_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT3_M_imag_we0_assign_proc : process(grp_FFT0_fu_306_data_OUT_M_imag_we0, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_OUT3_M_imag_we0 <= grp_FFT0_fu_306_data_OUT_M_imag_we0;
        else 
            data_OUT3_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT3_M_real_address0_assign_proc : process(grp_FFT0_fu_306_data_IN_M_real_address0, grp_FFT0_fu_306_data_OUT_M_real_address0, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_OUT3_M_real_address0 <= grp_FFT0_fu_306_data_OUT_M_real_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_OUT3_M_real_address0 <= grp_FFT0_fu_306_data_IN_M_real_address0;
        else 
            data_OUT3_M_real_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT3_M_real_ce0_assign_proc : process(grp_FFT0_fu_306_data_IN_M_real_ce0, grp_FFT0_fu_306_data_OUT_M_real_ce0, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_OUT3_M_real_ce0 <= grp_FFT0_fu_306_data_OUT_M_real_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_OUT3_M_real_ce0 <= grp_FFT0_fu_306_data_IN_M_real_ce0;
        else 
            data_OUT3_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT3_M_real_we0_assign_proc : process(grp_FFT0_fu_306_data_OUT_M_real_we0, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_OUT3_M_real_we0 <= grp_FFT0_fu_306_data_OUT_M_real_we0;
        else 
            data_OUT3_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT4_M_imag_address0_assign_proc : process(grp_FFT0_fu_306_data_IN_M_imag_address0, grp_FFT0_fu_306_data_OUT_M_imag_address0, ap_CS_fsm_state15, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_OUT4_M_imag_address0 <= grp_FFT0_fu_306_data_OUT_M_imag_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            data_OUT4_M_imag_address0 <= grp_FFT0_fu_306_data_IN_M_imag_address0;
        else 
            data_OUT4_M_imag_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT4_M_imag_ce0_assign_proc : process(grp_FFT0_fu_306_data_IN_M_imag_ce0, grp_FFT0_fu_306_data_OUT_M_imag_ce0, ap_CS_fsm_state15, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_OUT4_M_imag_ce0 <= grp_FFT0_fu_306_data_OUT_M_imag_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            data_OUT4_M_imag_ce0 <= grp_FFT0_fu_306_data_IN_M_imag_ce0;
        else 
            data_OUT4_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT4_M_imag_we0_assign_proc : process(grp_FFT0_fu_306_data_OUT_M_imag_we0, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_OUT4_M_imag_we0 <= grp_FFT0_fu_306_data_OUT_M_imag_we0;
        else 
            data_OUT4_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT4_M_real_address0_assign_proc : process(grp_FFT0_fu_306_data_IN_M_real_address0, grp_FFT0_fu_306_data_OUT_M_real_address0, ap_CS_fsm_state15, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_OUT4_M_real_address0 <= grp_FFT0_fu_306_data_OUT_M_real_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            data_OUT4_M_real_address0 <= grp_FFT0_fu_306_data_IN_M_real_address0;
        else 
            data_OUT4_M_real_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT4_M_real_ce0_assign_proc : process(grp_FFT0_fu_306_data_IN_M_real_ce0, grp_FFT0_fu_306_data_OUT_M_real_ce0, ap_CS_fsm_state15, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_OUT4_M_real_ce0 <= grp_FFT0_fu_306_data_OUT_M_real_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            data_OUT4_M_real_ce0 <= grp_FFT0_fu_306_data_IN_M_real_ce0;
        else 
            data_OUT4_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT4_M_real_we0_assign_proc : process(grp_FFT0_fu_306_data_OUT_M_real_we0, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_OUT4_M_real_we0 <= grp_FFT0_fu_306_data_OUT_M_real_we0;
        else 
            data_OUT4_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    data_OUT_M_imag_address0 <= tmp_1_reg_482(5 - 1 downto 0);

    data_OUT_M_imag_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            data_OUT_M_imag_ce0 <= ap_const_logic_1;
        else 
            data_OUT_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT_M_imag_we0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            data_OUT_M_imag_we0 <= ap_const_logic_1;
        else 
            data_OUT_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;

    data_OUT_M_real_address0 <= tmp_1_reg_482(5 - 1 downto 0);

    data_OUT_M_real_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            data_OUT_M_real_ce0 <= ap_const_logic_1;
        else 
            data_OUT_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT_M_real_we0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            data_OUT_M_real_we0 <= ap_const_logic_1;
        else 
            data_OUT_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_362_p2 <= "1" when (i_reg_273 = ap_const_lv6_20) else "0";
    exitcond_fu_403_p2 <= "1" when (i1_reg_295 = ap_const_lv6_20) else "0";
    exitcond_i_fu_380_p2 <= "1" when (i_i_reg_284 = ap_const_lv6_20) else "0";

    grp_FFT0_fu_306_FFT_stage_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_FFT0_fu_306_FFT_stage <= ap_const_lv6_10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_FFT0_fu_306_FFT_stage <= ap_const_lv6_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_FFT0_fu_306_FFT_stage <= ap_const_lv6_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_FFT0_fu_306_FFT_stage <= ap_const_lv6_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_FFT0_fu_306_FFT_stage <= ap_const_lv6_1;
        else 
            grp_FFT0_fu_306_FFT_stage <= "XXXXXX";
        end if; 
    end process;

    grp_FFT0_fu_306_ap_start <= grp_FFT0_fu_306_ap_start_reg;

    grp_FFT0_fu_306_data_IN_M_imag_q0_assign_proc : process(data_OUT0_M_imag_q0, data_OUT1_M_imag_q0, data_OUT2_M_imag_q0, data_OUT3_M_imag_q0, data_OUT4_M_imag_q0, ap_CS_fsm_state15, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_FFT0_fu_306_data_IN_M_imag_q0 <= data_OUT4_M_imag_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_FFT0_fu_306_data_IN_M_imag_q0 <= data_OUT3_M_imag_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_FFT0_fu_306_data_IN_M_imag_q0 <= data_OUT2_M_imag_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_FFT0_fu_306_data_IN_M_imag_q0 <= data_OUT1_M_imag_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_FFT0_fu_306_data_IN_M_imag_q0 <= data_OUT0_M_imag_q0;
        else 
            grp_FFT0_fu_306_data_IN_M_imag_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_FFT0_fu_306_data_IN_M_real_q0_assign_proc : process(data_OUT0_M_real_q0, data_OUT1_M_real_q0, data_OUT2_M_real_q0, data_OUT3_M_real_q0, data_OUT4_M_real_q0, ap_CS_fsm_state15, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_FFT0_fu_306_data_IN_M_real_q0 <= data_OUT4_M_real_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_FFT0_fu_306_data_IN_M_real_q0 <= data_OUT3_M_real_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_FFT0_fu_306_data_IN_M_real_q0 <= data_OUT2_M_real_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_FFT0_fu_306_data_IN_M_real_q0 <= data_OUT1_M_real_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_FFT0_fu_306_data_IN_M_real_q0 <= data_OUT0_M_real_q0;
        else 
            grp_FFT0_fu_306_data_IN_M_real_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_FFT0_fu_306_index_shift_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_FFT0_fu_306_index_shift <= ap_const_lv4_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_FFT0_fu_306_index_shift <= ap_const_lv4_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_FFT0_fu_306_index_shift <= ap_const_lv4_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_FFT0_fu_306_index_shift <= ap_const_lv4_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_FFT0_fu_306_index_shift <= ap_const_lv4_4;
        else 
            grp_FFT0_fu_306_index_shift <= "XXXX";
        end if; 
    end process;


    grp_FFT0_fu_306_pass_check_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_FFT0_fu_306_pass_check <= ap_const_lv6_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_FFT0_fu_306_pass_check <= ap_const_lv6_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_FFT0_fu_306_pass_check <= ap_const_lv6_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_FFT0_fu_306_pass_check <= ap_const_lv6_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_FFT0_fu_306_pass_check <= ap_const_lv6_10;
        else 
            grp_FFT0_fu_306_pass_check <= "XXXXXX";
        end if; 
    end process;


    grp_FFT0_fu_306_pass_shift_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_FFT0_fu_306_pass_shift <= ap_const_lv4_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_FFT0_fu_306_pass_shift <= ap_const_lv4_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_FFT0_fu_306_pass_shift <= ap_const_lv4_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_FFT0_fu_306_pass_shift <= ap_const_lv4_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_FFT0_fu_306_pass_shift <= ap_const_lv4_1;
        else 
            grp_FFT0_fu_306_pass_shift <= "XXXX";
        end if; 
    end process;

    i_2_fu_368_p2 <= std_logic_vector(unsigned(i_reg_273) + unsigned(ap_const_lv6_1));
    i_3_fu_386_p2 <= std_logic_vector(unsigned(i_i_reg_284) + unsigned(ap_const_lv6_1));
    i_4_fu_409_p2 <= std_logic_vector(unsigned(i1_reg_295) + unsigned(ap_const_lv6_1));
    rev_32_address0 <= tmp_i_fu_392_p1(5 - 1 downto 0);

    rev_32_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rev_32_ce0 <= ap_const_logic_1;
        else 
            rev_32_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_295),64));
    tmp_8_i_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rev_32_q0),64));
    tmp_i_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_284),64));
    tmp_s_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_273),64));

    xin_M_imag_address0_assign_proc : process(tmp_s_reg_429, ap_CS_fsm_state5, ap_CS_fsm_state3, tmp_8_i_fu_397_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            xin_M_imag_address0 <= tmp_8_i_fu_397_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            xin_M_imag_address0 <= tmp_s_reg_429(5 - 1 downto 0);
        else 
            xin_M_imag_address0 <= "XXXXX";
        end if; 
    end process;


    xin_M_imag_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            xin_M_imag_ce0 <= ap_const_logic_1;
        else 
            xin_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xin_M_imag_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            xin_M_imag_we0 <= ap_const_logic_1;
        else 
            xin_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    xin_M_real_address0_assign_proc : process(tmp_s_reg_429, ap_CS_fsm_state5, ap_CS_fsm_state3, tmp_8_i_fu_397_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            xin_M_real_address0 <= tmp_8_i_fu_397_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            xin_M_real_address0 <= tmp_s_reg_429(5 - 1 downto 0);
        else 
            xin_M_real_address0 <= "XXXXX";
        end if; 
    end process;


    xin_M_real_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            xin_M_real_ce0 <= ap_const_logic_1;
        else 
            xin_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xin_M_real_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            xin_M_real_we0 <= ap_const_logic_1;
        else 
            xin_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    xout_M_imag_address0_assign_proc : process(ap_CS_fsm_state16, tmp_1_fu_415_p1, grp_FFT0_fu_306_data_OUT_M_imag_address0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            xout_M_imag_address0 <= tmp_1_fu_415_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            xout_M_imag_address0 <= grp_FFT0_fu_306_data_OUT_M_imag_address0;
        else 
            xout_M_imag_address0 <= "XXXXX";
        end if; 
    end process;


    xout_M_imag_ce0_assign_proc : process(ap_CS_fsm_state16, grp_FFT0_fu_306_data_OUT_M_imag_ce0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            xout_M_imag_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            xout_M_imag_ce0 <= grp_FFT0_fu_306_data_OUT_M_imag_ce0;
        else 
            xout_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xout_M_imag_we0_assign_proc : process(grp_FFT0_fu_306_data_OUT_M_imag_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            xout_M_imag_we0 <= grp_FFT0_fu_306_data_OUT_M_imag_we0;
        else 
            xout_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    xout_M_real_address0_assign_proc : process(ap_CS_fsm_state16, tmp_1_fu_415_p1, grp_FFT0_fu_306_data_OUT_M_real_address0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            xout_M_real_address0 <= tmp_1_fu_415_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            xout_M_real_address0 <= grp_FFT0_fu_306_data_OUT_M_real_address0;
        else 
            xout_M_real_address0 <= "XXXXX";
        end if; 
    end process;


    xout_M_real_ce0_assign_proc : process(ap_CS_fsm_state16, grp_FFT0_fu_306_data_OUT_M_real_ce0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            xout_M_real_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            xout_M_real_ce0 <= grp_FFT0_fu_306_data_OUT_M_real_ce0;
        else 
            xout_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xout_M_real_we0_assign_proc : process(grp_FFT0_fu_306_data_OUT_M_real_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            xout_M_real_we0 <= grp_FFT0_fu_306_data_OUT_M_real_we0;
        else 
            xout_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
